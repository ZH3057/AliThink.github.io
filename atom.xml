<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The  Force  Awakens
</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2016-11-16T08:31:12.000Z</updated>
  <id>/</id>
  
  <author>
    <name>AliThink</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Focus</title>
    <link href="/2016/11/15/Focus/"/>
    <id>/2016/11/15/Focus/</id>
    <published>2016-11-15T03:15:14.000Z</published>
    <updated>2016-11-16T08:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Focus一次探索watchOS的实践。再次慨叹下Apple的审核速度，just one day…</p>
</blockquote>
<h2 id="Focus-有些事情需要这份执着"><a href="#Focus-有些事情需要这份执着" class="headerlink" title="Focus - 有些事情需要这份执着"></a>Focus - 有些事情需要这份执着</h2><p>人这一辈子总有一些一定要去做必须要去体验的东西。</p>
<p>对于这些事物的追求需要这份执念。</p>
<p>Focus帮助我们专注于做最重要的事情，给她一个期限，可能是一两年，也可能只有几天或者几小时，总之一旦决定拥有她，那么中途就不要背弃她。</p>
<p>人这一辈子不要过得太复杂，专注于现在，执着于每次的努力，当回看过往，必将为自己而骄傲。</p>
<blockquote>
<p>Focus App Store：<a href="https://itunes.apple.com/us/app/focus-concentrate-on-one-task/id1169917639" target="_blank" rel="external">传送门</a></p>
</blockquote>
<h2 id="Focus长什么样"><a href="#Focus长什么样" class="headerlink" title="Focus长什么样"></a>Focus长什么样</h2><p><img src="http://of71dfqgz.bkt.clouddn.com/focus_appstore.png" alt="focus_appstore.png"></p>
<h2 id="Focus参数"><a href="#Focus参数" class="headerlink" title="Focus参数"></a>Focus参数</h2><ul>
<li>Language: pure Swift3</li>
<li>Support: iOS9+、watchOS3.0+（包含Complication、WatchConnectivity）</li>
<li>Vender: Realm(iOS、watchOS)、DCPathButton、IQKeyboardManagerSwift、SCLAlertView、SnapKit</li>
<li>OpenSource：梳理完毕后开源</li>
</ul>
<h2 id="为什么要做这么个App"><a href="#为什么要做这么个App" class="headerlink" title="为什么要做这么个App"></a>为什么要做这么个App</h2><p>Apple发布了新款的Apple Watch Series2，之前一直想涉足watchOS的领域，一看设备更新了就赶紧入手了一款。这么贵的东东，不开发点东西感觉对不起自己花出去的银子。于是在认真体验了一段时间后，进行了以下产品思考:</p>
<p><img src="http://of71dfqgz.bkt.clouddn.com/aw_mind.png" alt="aw_mind.png"></p>
<p>最后决定先尝试制作一款GTD类APP，跟其它同质App的区别呢就在于只关注于一件事情的实现引导。提供的Apple Watch端App包含了几乎所有iOS端的功能，同时结合Complication可以将Focus的精简信息展现到表盘中。利用Apple Watch的贴近特点，进行一些轻度提醒。（说不定过段时间可能会搞一下那个偷偷录音的APP ^_^）</p>
<h2 id="Focus让我了解了什么"><a href="#Focus让我了解了什么" class="headerlink" title="Focus让我了解了什么"></a>Focus让我了解了什么</h2><h3 id="1-Swift3"><a href="#1-Swift3" class="headerlink" title="1. Swift3"></a>1. Swift3</h3><p>Swift3更新以来，还没有将原有的swift2项目进行迁移，正好拿个人项目进行了实践。</p>
<p>综合体会就是更加优雅简洁了，这里就不展开描述了。推荐几个不错的教程，首先是官方文档，然后有猫神的《Swifter - <em>100</em> 个 <em>Swift</em> 必备 <em>tips</em>》（买的正版，动态更新为了swift3的版本）,还有raywenderlich swift相关教程也在第一时间更新为了swift3版本。</p>
<h3 id="2-watchOS-3-0"><a href="#2-watchOS-3-0" class="headerlink" title="2. watchOS 3.0"></a>2. watchOS 3.0</h3><p>初涉watch SDK，现在的感觉是相较iOS SDK各有优劣，不过watch SDK的劣势多了一些。</p>
<h4 id="几个小例子："><a href="#几个小例子：" class="headerlink" title="几个小例子："></a>几个小例子：</h4><ul>
<li>table这一块，watchOS的处理会更“简约”一些，没有这么多的数据代理，转而采用了配置方法的调用，初始化配置更集中了。这里也是针对watch的使用场景进行了SDK层面的精简优化。</li>
<li>自带一个计时性质的文本控件date、timer，一般的场景只需要简单配置就可以使用了（不过可定制项比较有限，Focus中为了统一，还是改为自己实现一个倒计时）</li>
<li>感觉watchOS中的picker就是一个噩梦。。。，官方是没有提供watchOS版本的日期选择器的，所以需要自己用picker进行组装，里面好多坑，这块等开源后感兴趣的同学可以参考下。</li>
<li>关于控件封装，原本搞完了watchOS版本的日期选择器是打算抽离封装一下的，但是发现watchOS的控件封装真的没有太好的途径，总不能把一个controller分享出来吧。。。（虽然github上有人这么搞）</li>
</ul>
<h4 id="几个建议："><a href="#几个建议：" class="headerlink" title="几个建议："></a>几个建议：</h4><ul>
<li><p>将iOS与watchOS的公用模块提取为单独的framework方便复用。</p>
</li>
<li><p>iOS与watchOS的数据同步通过WatchConnectivity，由于一些技术文章的更新缓慢，其中介绍的appgroup方式其实已经不适用了（被坑了一轮）。</p>
<p>同时建议除了配置自动的同步机制外，添加一个按钮触发的同步操作，以方便用户及时进行同步。例如Focus中当点击iPhone或者watch主页面中央的小漏斗时，会弹出同步提示窗口：</p>
<p><img src="http://of71dfqgz.bkt.clouddn.com/sync.PNG" alt="sync.PNG"></p>
</li>
<li><p>关于文本录入这块watchOS3已经可以使用presentTextInputController(withSuggestions:allowedInputMode:)了，弹出的输入模块可以进行语音录入，建议选择以及新更新的Scribble，也建议大家使用。（虽然中文的录入还是有点难用）</p>
</li>
</ul>
<h3 id="3-Realm"><a href="#3-Realm" class="headerlink" title="3. Realm"></a>3. Realm</h3><p>早就听说了realm的大名，一直想尝试一下，正好借助这个机会集成了进去。不过得出的结论是，其实就目前的realm而言，个人感觉不太适合用于watch相关的应用。主要原因就是库文件略大，watch应用四五十兆的应用大小限制，使得每一寸空间都显得特别珍贵（App Store审核的限制，其实相较Apple Watch的存储来说集成realm造成的空间占用还是可以接受的）。</p>
<h4 id="说说使用realm的几点感受"><a href="#说说使用realm的几点感受" class="headerlink" title="说说使用realm的几点感受:"></a>说说使用realm的几点感受:</h4><ul>
<li><p>用起来确实很爽，很容易上手，基本就是在操作对象，用过coredata的同学应该很习惯这种方式。</p>
</li>
<li><p>数据库版本迁移这块仔细一点也很容易搞定。</p>
</li>
<li><p>因为要同时集成iOS跟watchOS两个版本的realm所以不要将他们放在同一个项目文件夹下，分别创建文件夹添加引用。</p>
</li>
<li><p>官方的提供的run script：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bash &quot;$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;FRAMEWORKS_FOLDER_PATH&#125;/Realm.framework/strip-frameworks.sh&quot;</div></pre></td></tr></table></figure>
<p>需要在iOS和watch extension的Build Phases中都要进行添加调用。（我就是因为没有在extension中添加调用导致模拟器真机运行正常，上传App Store却总是验证报错…）</p>
</li>
<li><p>对于添加了realm的watchOS项目建议打开bitcode，也是为了优化watch APP的体积。</p>
</li>
</ul>
<h3 id="4-“新”产品上线"><a href="#4-“新”产品上线" class="headerlink" title="4. “新”产品上线"></a>4. “新”产品上线</h3><p>好久没有完整的操作一遍应用的上线流程了，体会有几点：</p>
<ul>
<li>Xcode8.1的自动管理签名还是挺好用的，尚未发现问题。使用该配置后，记得Build Settings中Code Signing Identity的子选项都要配置为iOS Developer。</li>
<li>发现Certificate中添加了专门用于生成服务器推送证书的功能。（估计早就更新了，之前没在意）</li>
<li>新的itunes connect功能真的挺好用，相较原来的版本慢慢的幸福感。</li>
<li>慨叹下目前Apple的审核速度，真实快啊，上传到上架one day。</li>
</ul>
<h2 id="可利用的资源"><a href="#可利用的资源" class="headerlink" title="可利用的资源"></a>可利用的资源</h2><ul>
<li><a href="https://developer.apple.com/watchos/resources/" target="_blank" rel="external">watchOS官方资源（包括Human Interface Guidelines、App Programming Guide for watchOS 等)</a></li>
<li><a href="https://developer.apple.com/swift/resources/" target="_blank" rel="external">swift官方资源</a></li>
<li><a href="https://www.raywenderlich.com/" target="_blank" rel="external">Raywenderlich</a></li>
<li><a href="https://onevcat.com/2015/08/watchos2/" target="_blank" rel="external">猫神相关文章(虽然是watchOS 2的，但是很受用)</a></li>
<li>图形素材：<a href="http://www.dribbble.com/" target="_blank" rel="external">dribbble(寻找创意)</a>、<a href="http://www.easyicon.net/" target="_blank" rel="external">easyicon(图标)</a>、<a href="http://makeappicon.com/" target="_blank" rel="external">MakeAppIcon(iPhone App图标与watch App图标生成)</a></li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Focus会持续更新，目前主要解决了我自己的一些痛点，希望她也能够帮助到你。如果有什么好的建议欢迎留言讨论。Watch中的App种类确实很有限，不像iOS的这么丰富，有好的产品创意也欢迎一起讨论。watchOS 3.0的更新让Apple Watch焕发了新的生机，有了不少新的可能，让我们一起把我们的Apple Watch丰富起来吧^_^。</p>
<p>最后附上50个促销代码，感兴趣的同学可以下载使用。</p>
<p><a href="http://of71dfqgz.bkt.clouddn.com/Focus%E5%85%8D%E8%B4%B9%E7%A0%81.txt" target="_blank" rel="external">促销码传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Focus一次探索watchOS的实践。再次慨叹下Apple的审核速度，just one day…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Focus-有些事情需要这份执着&quot;&gt;&lt;a href=&quot;#Focus-有些事情需要这份执着&quot; cl
    
    </summary>
    
      <category term="个人作品" scheme="/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    
  </entry>
  
  <entry>
    <title>next、空白与404</title>
    <link href="/2016/11/14/next%E4%B8%8E404/"/>
    <id>/2016/11/14/next与404/</id>
    <published>2016-11-14T08:24:13.000Z</published>
    <updated>2016-11-14T08:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>有没有发现最近github pages访问特别慢，是不是发现自己挂在github pages上的东东变成一片空白啦，那么这篇文章也许能帮助到你。</p>
</blockquote>
<h2 id="Github-pages访问速度慢"><a href="#Github-pages访问速度慢" class="headerlink" title="Github pages访问速度慢"></a>Github pages访问速度慢</h2><p>也不知道是不是美国大选的原因（胡诌模式），最近自己挂在github pages上面的博客访问速度特别慢。解决方案大致搜了下，还是选择一个国内的pages服务靠谱一些，毕竟不是自己的服务器，可以控制的东西确实有限。</p>
<p>那么国内提供这种服务的自然就想到了coding。</p>
<p>至于coding里面如何搭建pages服务就不再冗述了，网上的文章一大把，只在这里标记几个特别点的小坑：</p>
<ul>
<li>建pages的项目名一定要跟coding用户名同名。</li>
<li>开始部署pages服务时，项目分支一定要写对（额。。默认的跟填充的名字竟然不是主分支。。。）。</li>
</ul>
<p>剩下的呢，基本就是对于域名的处理了，对于同一个CNAME分别创建默认线路跟海外线路两条解析，默认的对应到coding的pages服务地址，海外的对应github的pages服务地址即可。</p>
<h2 id="页面好白好白"><a href="#页面好白好白" class="headerlink" title="页面好白好白"></a>页面好白好白</h2><p>突然间自己的博客变成了一大片空白，赶紧打开开发者工具看了下，发现有好多vender下面的js、css都加载不出来了。。。</p>
<p>稍微研究了一下，原来是github pages的jekyll新版本会忽略掉vender目录。然后看了下next的更新，其实新版的next（5.1.0）已经对于这种情况进行了处理，将原有vender目录下的东东迁移到了lib目录。那么按说问题应该解决了，于是赶紧下载了next最新的主题源码，将原有配置迁移好了之后，发布测试一看还是白花花的一片。WTF …</p>
<p>那么记录下这里的坑:</p>
<ul>
<li><p>新版本的next虽然修复了这个问题，但是主题配置文件里面的vender默认路径依然没有指向lib，于是果断修改，问题解决。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">vendors:</span></div><div class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></div><div class="line">  <span class="symbol">_internal:</span> lib</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经此一役，问题就应该都解决了，继续码字吧，骚年们。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有没有发现最近github pages访问特别慢，是不是发现自己挂在github pages上的东东变成一片空白啦，那么这篇文章也许能帮助到你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Github-pages访问速度慢&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="疑难杂症" scheme="/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
  </entry>
  
  <entry>
    <title>小试设计</title>
    <link href="/2016/10/17/%E5%B0%8F%E8%AF%95%E8%AE%BE%E8%AE%A1/"/>
    <id>/2016/10/17/小试设计/</id>
    <published>2016-10-17T13:34:27.000Z</published>
    <updated>2016-10-17T13:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>公司的产品兄弟走了，有需求，只能自己操刀了。</p>
<p>Sketch的综合体验还是很不错的，功能发现自然流畅，没有看过教程，也能无阻碍的进行设计。</p>
</blockquote>
<h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><img src="http://of71dfqgz.bkt.clouddn.com/1111small.png" alt="双十一"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>大致划分展示区域：上部为纯数据点展示；下部为图形图表。</li>
<li>背景高斯模糊用于进行模块划分。</li>
<li>对于基础色的选择，以及字号的梳理，让页面不会显得特别凌乱。</li>
<li>PC端、移动端的风格统一化。</li>
<li>内容导向，拒绝杂乱的背景。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;公司的产品兄弟走了，有需求，只能自己操刀了。&lt;/p&gt;
&lt;p&gt;Sketch的综合体验还是很不错的，功能发现自然流畅，没有看过教程，也能无阻碍的进行设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;成果&quot;&gt;&lt;a href=&quot;#成果&quot; clas
    
    </summary>
    
      <category term="sketch" scheme="/categories/sketch/"/>
    
    
  </entry>
  
  <entry>
    <title>学做父亲</title>
    <link href="/2016/10/16/%E5%AD%A6%E5%81%9A%E7%88%B6%E4%BA%B2/"/>
    <id>/2016/10/16/学做父亲/</id>
    <published>2016-10-16T14:05:51.000Z</published>
    <updated>2016-10-16T14:13:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近看了本书，孙云晓的《好好做父亲》，书中的几个原则比较有指导意义，罗列出来，各位爸爸学徒们一起努力吧^_^</p>
</blockquote>
<h3 id="重要原则"><a href="#重要原则" class="headerlink" title="重要原则"></a>重要原则</h3><p>在家庭关系中，不宜把亲子关系放在第一位，而应该是夫妻关系第一，亲子关系第二。因为，夫妻关系的稳定最有利于孩子健康成长。</p>
<h3 id="好父亲的8种品质"><a href="#好父亲的8种品质" class="headerlink" title="好父亲的8种品质"></a>好父亲的8种品质</h3><ol>
<li>认真负责</li>
<li>意志坚定</li>
<li>勇敢独立</li>
<li>目光远大，影响孩子作出积极的人生选择</li>
<li>是非分明</li>
<li>胸怀宽广，富有包容精神</li>
<li>勤劳自律</li>
<li>爱好运动，父亲是孩子最好的教练</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看了本书，孙云晓的《好好做父亲》，书中的几个原则比较有指导意义，罗列出来，各位爸爸学徒们一起努力吧^_^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;重要原则&quot;&gt;&lt;a href=&quot;#重要原则&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>AFNetworking源码拾遗</title>
    <link href="/2016/09/12/AFNetworking%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/"/>
    <id>/2016/09/12/AFNetworking源码拾遗/</id>
    <published>2016-09-12T01:47:29.000Z</published>
    <updated>2016-09-12T09:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一句话简介：最著名的OC开源网络库。</p>
<p>Github: <a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">传送门</a></p>
<p>PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p>
</blockquote>
<h3 id="1-import和modulemap"><a href="#1-import和modulemap" class="headerlink" title="1. @import和modulemap"></a>1. @import和modulemap</h3><p>首先OC中的@import以及Swift中的import其实都是基于modulemap实现的。</p>
<ul>
<li>@import的使用可以参考：<a href="http://stackoverflow.com/questions/18947516/import-vs-import-ios-7" target="_blank" rel="external">@import vs #import</a></li>
<li>关于modulemap相关的内容可以参考：<a href="http://nsomar.com/modular-framework-creating-and-using-them/" target="_blank" rel="external">Modular framework, creating and using them</a></li>
</ul>
<h3 id="2-各种标记"><a href="#2-各种标记" class="headerlink" title="2. 各种标记"></a>2. 各种标记</h3><ul>
<li>__unused: 避免因变量声明未使用造成的警告。</li>
<li>ARC相关（如__autoreleasing）参考: <a href="http://www.cnblogs.com/flyFreeZn/p/4264220.html" target="_blank" rel="external">iOS开发ARC内存管理技术要点</a></li>
<li>NS_DESIGNATED_INITIALIZER 声明了designated初始化方法后，其余初始化方法如果没有调用designated初始化会有警告提示，具体可以参考: <a href="http://useyourloaf.com/blog/xcode-6-objective-c-modernization/" target="_blank" rel="external">Xcode 6 Objective-C Modernization</a> </li>
<li>DEPRECATED_ATTRIBUTE（过期）、NS_SWIFT_NOTHROW（一些便于OC迁移Swift的标记）等</li>
</ul>
<h3 id="3-宏"><a href="#3-宏" class="headerlink" title="3. 宏"></a>3. 宏</h3><ul>
<li>FOUNDATION_EXPORT: 对于extern的兼容性封装，根据不同的平台，转化为对应的extern形式。</li>
<li>NS_ASSUME_NONNULL_BEGIN、NS_ASSUME_NONNULL_END: 在宏范围内的变量、参数、返回值等都默认添加nonnull。</li>
</ul>
<h3 id="4-queryString转换的经典代码"><a href="#4-queryString转换的经典代码" class="headerlink" title="4. queryString转换的经典代码"></a>4. queryString转换的经典代码</h3><p>经常被摘出来放到自己项目中使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> Returns a percent-escaped string following RFC 3986 for a query string key or value.</div><div class="line"> RFC 3986 states that the following characters are &quot;reserved&quot; characters.</div><div class="line">    - General Delimiters: &quot;:&quot;, &quot;#&quot;, &quot;[&quot;, &quot;]&quot;, &quot;@&quot;, &quot;?&quot;, &quot;/&quot;</div><div class="line">    - Sub-Delimiters: &quot;!&quot;, &quot;$&quot;, &quot;&amp;&quot;, &quot;&apos;&quot;, &quot;(&quot;, &quot;)&quot;, &quot;*&quot;, &quot;+&quot;, &quot;,&quot;, &quot;;&quot;, &quot;=&quot;</div><div class="line"></div><div class="line"> In RFC 3986 - Section 3.4, it states that the &quot;?&quot; and &quot;/&quot; characters should not be escaped to allow</div><div class="line"> query strings to include a URL. Therefore, all &quot;reserved&quot; characters with the exception of &quot;?&quot; and &quot;/&quot;</div><div class="line"> should be percent-escaped in the query string.</div><div class="line">    - parameter string: The string to be percent-escaped.</div><div class="line">    - returns: The percent-escaped string.</div><div class="line"> */</div><div class="line">NSString * AFPercentEscapedStringFromString(NSString *string) &#123;</div><div class="line">    static NSString * const kAFCharactersGeneralDelimitersToEncode = @&quot;:#[]@&quot;; // does not include &quot;?&quot; or &quot;/&quot; due to RFC 3986 - Section 3.4</div><div class="line">    static NSString * const kAFCharactersSubDelimitersToEncode = @&quot;!$&amp;&apos;()*+,;=&quot;;</div><div class="line"></div><div class="line">    NSMutableCharacterSet * allowedCharacterSet = [[NSCharacterSet URLQueryAllowedCharacterSet] mutableCopy];</div><div class="line">    [allowedCharacterSet removeCharactersInString:[kAFCharactersGeneralDelimitersToEncode stringByAppendingString:kAFCharactersSubDelimitersToEncode]];</div><div class="line"></div><div class="line">	// FIXME: https://github.com/AFNetworking/AFNetworking/pull/3028</div><div class="line">    // return [string stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</div><div class="line">    // 以下为针对非单字节字符的处理</div><div class="line">  </div><div class="line">    static NSUInteger const batchSize = 50;</div><div class="line"></div><div class="line">    NSUInteger index = 0;</div><div class="line">    NSMutableString *escaped = @&quot;&quot;.mutableCopy;</div><div class="line"></div><div class="line">    while (index &lt; string.length) &#123;</div><div class="line">        NSUInteger length = MIN(string.length - index, batchSize);</div><div class="line">        NSRange range = NSMakeRange(index, length);</div><div class="line"></div><div class="line">        // To avoid breaking up character sequences such as 👴🏻👮🏽</div><div class="line">        range = [string rangeOfComposedCharacterSequencesForRange:range];</div><div class="line"></div><div class="line">        NSString *substring = [string substringWithRange:range];</div><div class="line">        NSString *encoded = [substring stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</div><div class="line">        [escaped appendString:encoded];</div><div class="line"></div><div class="line">        index += range.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	return escaped;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-架构简图"><a href="#5-架构简图" class="headerlink" title="5. 架构简图"></a>5. 架构简图</h3><p><img src="http://alithink.com/img/7afnetworking/afnetworking.png" alt="AFNetworking.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一句话简介：最著名的OC开源网络库。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;
    
    </summary>
    
      <category term="读过的源码" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>CTNetworking源码拾遗</title>
    <link href="/2016/09/05/CTNetworking%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/"/>
    <id>/2016/09/05/CTNetworking源码拾遗/</id>
    <published>2016-09-05T06:17:07.000Z</published>
    <updated>2016-09-05T08:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 一句话简介：CTNetworking为casa大神针对iOS网络层方案的一个架构实例。</p>
<p> 架构详解: <a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html" target="_blank" rel="external">传送门</a></p>
<p> Github: <a href="https://github.com/casatwy/RTNetworking" target="_blank" rel="external">传送门</a></p>
<p> PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p>
</blockquote>
<h3 id="1-宏相关"><a href="#1-宏相关" class="headerlink" title="1. 宏相关"></a>1. 宏相关</h3><ul>
<li><p>预防重复引入导致的重定义问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#ifndef CTNetworking_CTNetworkingConfiguration_h</div><div class="line">#define CTNetworking_CTNetworkingConfiguration_h</div><div class="line"></div><div class="line">typedef NS_ENUM(NSInteger, CTAppType) &#123;</div><div class="line">    CTAppTypexxx</div><div class="line">&#125;;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">static NSString *CTKeychainServiceName = @&quot;xxxxx&quot;;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">extern NSString * const kCTServiceGDMapV3;</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>CTNetworking_CTNetworkingConfiguration_h这块的命名没有什么特别的规范，往往是将点替换为下划线，开头添加一条下划线。（casa这里是在最前面又加了工程名，AFNetworking则是省略了扩展名）</p>
</li>
<li><p>巧妙的宏替换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#define AXCallAPI(REQUEST_METHOD, REQUEST_ID)\</div><div class="line">&#123;\</div><div class="line">    __weak typeof(self) weakSelf = self;\</div><div class="line">    REQUEST_ID = [[CTApiProxy sharedInstance] call##REQUEST_METHOD##WithParams:apiParams serviceIdentifier:self.child.serviceType methodName:self.child.methodName success:^(CTURLResponse *response) &#123;\</div><div class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;\</div><div class="line">        [strongSelf successedOnCallingAPI:response];\</div><div class="line">    &#125; fail:^(CTURLResponse *response) &#123;\</div><div class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;\</div><div class="line">        [strongSelf failedOnCallingAPI:response withErrorType:CTAPIManagerErrorTypeDefault]; \</div><div class="line">    &#125;];\</div><div class="line">    [self.requestIdList addObject:@(REQUEST_ID)];\</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 通过##REQUEST_METHOD##包裹的变量将进行宏替换，进而达到根据约定区分方法调用的目的</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-UDID"><a href="#2-UDID" class="headerlink" title="2. UDID"></a>2. UDID</h3><p>常规的UUID+keychain的策略：</p>
<ul>
<li><p>创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (NSString *)CT_createUUID</div><div class="line">&#123;</div><div class="line">    CFUUIDRef uuid = CFUUIDCreate(NULL);</div><div class="line">    CFStringRef string = CFUUIDCreateString(NULL, uuid);</div><div class="line">    CFRelease(uuid);</div><div class="line">    return (__bridge_transfer NSString *)string;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>保存读取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (void)saveUDID:(NSString *)udid</div><div class="line">&#123;</div><div class="line">    BOOL saveOk = NO;</div><div class="line">    NSData *udidData = [self searchKeychainCopyMatching:CTUDIDName];</div><div class="line">    if (udidData == nil) &#123;</div><div class="line">        saveOk = [self createKeychainValue:udid forIdentifier:CTUDIDName];</div><div class="line">    &#125;else&#123;</div><div class="line">        saveOk = [self updateKeychainValue:udid forIdentifier:CTUDIDName];</div><div class="line">    &#125;</div><div class="line">    if (!saveOk) &#123;</div><div class="line">        [self createPasteBoradValue:udid forIdentifier:CTUDIDName];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)UDID</div><div class="line">&#123;</div><div class="line">    NSData *udidData = [self searchKeychainCopyMatching:CTUDIDName];</div><div class="line">    NSString *udid = nil;</div><div class="line">    if (udidData != nil) &#123;</div><div class="line">        NSString *temp = [[NSString alloc] initWithData:udidData encoding:NSUTF8StringEncoding];</div><div class="line">        udid = [NSString stringWithFormat:@&quot;%@&quot;, temp];</div><div class="line">    &#125;</div><div class="line">    if (udid.length == 0) &#123;</div><div class="line">        udid = [self readPasteBoradforIdentifier:CTUDIDName];</div><div class="line">    &#125;</div><div class="line">    return udid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-内存管理权转移标记"><a href="#3-内存管理权转移标记" class="headerlink" title="3. 内存管理权转移标记"></a>3. 内存管理权转移标记</h3><ul>
<li>__bridge: 不涉及管理所有权的转移。</li>
<li>__bridge_transfer: CF对象转成OC对象时，顺便交出内存管理权。（ARC）</li>
<li>__bridge_retained: OC对象转成CF对象时，顺便交出内存管理权。（CFRelease(xxx)）</li>
</ul>
<h3 id="4-DECORATOR-PATTERN小解"><a href="#4-DECORATOR-PATTERN小解" class="headerlink" title="4. DECORATOR PATTERN小解"></a>4. DECORATOR PATTERN小解</h3><p><img src="http://alithink.com/img/6ctnetworking/decorator.jpg" alt="decorator.png"></p>
<p>适用场景：</p>
<ul>
<li><p>在不影响其他对象的情况下,以动态、透明的方式给单个对象添加职责。</p>
</li>
<li><p>处理那些可以撤消的职责。</p>
</li>
<li><p>当不能采用生成子类的方法进行扩充时。一种情况是,可能有大量独立的扩展,为支持每一种组合将产生大量的子类,使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏,或类定义不能用于生成子类。            </p>
<blockquote>
<p> 一个专门讲解OC设计模式的开源库—<a href="https://github.com/huang303513/Design-Pattern-For-iOS" target="_blank" rel="external">传送门</a>        </p>
</blockquote>
</li>
</ul>
<h3 id="5-闭包的三元操作"><a href="#5-闭包的三元操作" class="headerlink" title="5. 闭包的三元操作"></a>5. 闭包的三元操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fail?fail(CTResponse):nil</div></pre></td></tr></table></figure>
<h3 id="6-封装一个统一的空值处理"><a href="#6-封装一个统一的空值处理" class="headerlink" title="6. 封装一个统一的空值处理"></a>6. 封装一个统一的空值处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">#import &quot;NSObject+AXNetworkingMethods.h&quot;</div><div class="line">@implementation NSObject (AXNetworkingMethods)</div><div class="line"></div><div class="line">- (id)CT_defaultValue:(id)defaultData</div><div class="line">&#123;</div><div class="line">    if (![defaultData isKindOfClass:[self class]]) &#123;</div><div class="line">        return defaultData;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if ([self CT_isEmptyObject]) &#123;</div><div class="line">        return defaultData;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)CT_isEmptyObject</div><div class="line">&#123;</div><div class="line">    if ([self isEqual:[NSNull null]]) &#123;</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if ([self isKindOfClass:[NSString class]]) &#123;</div><div class="line">        if ([(NSString *)self length] == 0) &#123;</div><div class="line">            return YES;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if ([self isKindOfClass:[NSArray class]]) &#123;</div><div class="line">        if ([(NSArray *)self count] == 0) &#123;</div><div class="line">            return YES;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if ([self isKindOfClass:[NSDictionary class]]) &#123;</div><div class="line">        if ([(NSDictionary *)self count] == 0) &#123;</div><div class="line">            return YES;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>如果要是Swift的话其实就不用这么搞啦^_^</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">optionalVarA ?? <span class="string">"为空的时候我就派上用场啦"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 一句话简介：CTNetworking为casa大神针对iOS网络层方案的一个架构实例。&lt;/p&gt;
&lt;p&gt; 架构详解: &lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-cen
    
    </summary>
    
      <category term="读过的源码" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>CTMediator源码拾遗</title>
    <link href="/2016/09/01/CTMediator%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/"/>
    <id>/2016/09/01/CTMediator源码拾遗/</id>
    <published>2016-09-01T02:13:59.000Z</published>
    <updated>2016-09-05T01:52:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一句话简介：CTMediator为casa大神针对iOS组件化方案的一个架构实例。</p>
<p>架构详解: <a href="http://casatwy.com/iOS-Modulization.html" target="_blank" rel="external">传送门</a></p>
<p>Github: <a href="https://github.com/casatwy/CTMediator" target="_blank" rel="external">传送门</a></p>
<p>PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p>
</blockquote>
<h3 id="1-UIViewController常用分段"><a href="#1-UIViewController常用分段" class="headerlink" title="1. UIViewController常用分段"></a>1. UIViewController常用分段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#pragma mark - life cycle</div><div class="line">#pragma mark - UITableViewDelegate</div><div class="line">#pragma mark - CustomDelegate</div><div class="line">#pragma mark - event response</div><div class="line">#pragma mark - private methods</div><div class="line">#pragma mark - getters and setters</div></pre></td></tr></table></figure>
<p>这里有个争论就是关于是不是应该将属性实例的初始化放在getter中，这里个人倾向于casa的做法（放在getter中），所以贴一下相关的解释：</p>
<blockquote>
<p>我比较习惯一个对象的”私有”属性写在extension里面，然后这些属性的初始化全部放在getter里面做，在init和dealloc之外，是不会出现任何类似<code>_property</code>这样的写法的。</p>
<p>唐巧说他喜欢的做法是用<code>_property</code>这种，然后关于<code>_property</code>的初始化通过<code>[self setupProperty]</code>这种做法去做。从刚才上面的代码来看，就是要在viewDidLoad里面多调用一个setup方法而已，然后我推荐的方法就是不用多调一个setup方法，直接走getter。</p>
<p>嗯，怎么说呢，其实两种做法都能完成需求。但是从另一个角度看，苹果之所以选择让<code>[self getProperty]</code>和<code>self.property</code>可以互相通用，这种做法已经很明显地表达了苹果的倾向：<code>希望每个property都是通过getter方法来获得</code>。</p>
<p>早在2003年，Allen Holub就发了篇文章《<a href="http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html" target="_blank" rel="external">Why getter and setter methods are evil</a>》，自此之后，业界就对此产生了各种争议，虽然是从Java开始说的，但是发展到后面各种语言也参与了进来。然后虽然现在关于这个问题讨论得少了，但是依旧属于没有定论的状态。setter的情况比较复杂，也不是我这一节的重点，我这边还是主要说getter。我们从objc的设计来看，苹果的设计者更加倾向于<code>getter is not evil</code>。</p>
<p>认为<code>getter is evil</code>的原因有非常之多，或大或小，随着争论的进行，大家慢慢就聚焦到这样的一个原因：<code>Getter和Setter提供了一个能让外部修改对象内部数据的方式，这是evil的，正常情况下，一个对象自己私有的变量应该是只有自己关心</code>。</p>
<p>然后我们回到iOS领域来，objc也同样面临了这样的问题，甚至更加严重：<code>objc并没有像Java那么严格的私有概念</code>。但在实际工作中，我们不太会去操作头文件里面没有的变量，这是从规范上就被禁止的。</p>
<p>认为<code>getter is not evil</code>的原因也可以聚焦到一个：<code>高度的封装性</code>。getter事实上是工厂方法，有了getter之后，业务逻辑可以更加专注于调用，而不必担心当前变量是否可用。我们可以想一下，假设一个ViewController有20个subview要加入view中，这20个subview的初始化代码是肯定逃不掉的，放在哪里比较好？放在哪里都比放在addsubview的地方好，我个人认为最好的地方还是放在getter里面，结合单例模式之后，代码会非常整齐，生产的地方和使用的地方得到了很好的区分。</p>
<p>所以放到iOS来说，我还是觉得使用getter会比较好，因为evil的地方在iOS这边基本都避免了，not evil的地方都能享受到，还是不错的。</p>
</blockquote>
<h3 id="2-应该在哪里配置View的位置？（-继续引用casa的原文）"><a href="#2-应该在哪里配置View的位置？（-继续引用casa的原文）" class="headerlink" title="2. 应该在哪里配置View的位置？（^_^继续引用casa的原文）"></a>2. 应该在哪里配置View的位置？（^_^继续引用casa的原文）</h3><ul>
<li><p>关于在哪儿写Constraints?</p>
<p>苹果在文档中指出，<code>updateViewConstraints</code>是用来做add constraints的地方。</p>
<p>但是在<a href="http://stackoverflow.com/questions/17497002/when-will-or-wont-updateviewconstraints-be-called-on-my-view-controller-for-m" target="_blank" rel="external">这里</a>有一个回答者说<code>updateViewConstraints</code>并不适合做添加Constraints的事情。</p>
<p>综合我自己和评论区各位关心这个问题的兄弟们的各种测试和各种文档，我现在觉得还是在<code>viewDidLoad</code>里面开一个layoutPageSubviews的方法，然后在这个里面创建Constraints并添加，会比较好。就是像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    [self.view addSubview:self.firstView];</div><div class="line">    [self.view addSubview:self.secondView];</div><div class="line">    [self.view addSubview:self.thirdView];</div><div class="line"></div><div class="line">    [self layoutPageSubviews];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)layoutPageSubviews</div><div class="line">&#123;</div><div class="line">    [self.view addConstraints:xxxConstraints];</div><div class="line">    [self.view addConstraints:yyyConstraints];</div><div class="line">    [self.view addConstraints:zzzConstraints];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>生命周期方法选择</p>
<p>其实在viewWillAppear这里改变UI元素不是很可靠，Autolayout发生在viewWillAppear之后，严格来说这里通常不做视图位置的修改，而用来更新Form数据。改变位置可以放在viewWilllayoutSubview或者didLayoutSubview里，而且在viewDidLayoutSubview确定UI位置关系之后设置autoLayout比较稳妥。另外，viewWillAppear在每次页面即将显示都会调用，viewWillLayoutSubviews虽然在lifeCycle里调用顺序在viewWillAppear之后，但是只有在页面元素需要调整时才会调用，避免了Constraints的重复添加。</p>
</li>
</ul>
<h3 id="3-TableView-didSelect习惯"><a href="#3-TableView-didSelect习惯" class="headerlink" title="3. TableView didSelect习惯"></a>3. TableView didSelect习惯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 选择的开始先取消选择状态</div><div class="line">[tableView deselectRowAtIndexPath:indexPath animated:YES]</div></pre></td></tr></table></figure>
<h4 id="4-URL相关api"><a href="#4-URL相关api" class="headerlink" title="4. URL相关api"></a>4. URL相关api</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">NSMutableDictionary *params = [[NSMutableDictionary alloc] init];</div><div class="line"></div><div class="line">// 1. query: key1=value1&amp;key2=value2</div><div class="line">NSString *urlString = [url query];</div><div class="line"></div><div class="line">// 2. 解析参数</div><div class="line">for (NSString *param in [urlString componentsSeparatedByString:@&quot;&amp;&quot;]) &#123;</div><div class="line">    NSArray *elts = [param componentsSeparatedByString:@&quot;=&quot;];</div><div class="line">    if([elts count] &lt; 2) continue;</div><div class="line">    [params setObject:[elts lastObject] forKey:[elts firstObject]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 3. path: /index.html</div><div class="line">NSString *actionName = [url.path stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;&quot;];</div><div class="line">if ([actionName hasPrefix:@&quot;native&quot;]) &#123;</div><div class="line">    return @(NO);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-忽略不必要的警告⚠️"><a href="#5-忽略不必要的警告⚠️" class="headerlink" title="5. 忽略不必要的警告⚠️"></a>5. 忽略不必要的警告⚠️</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#pragma clang diagnostic push</div><div class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</div><div class="line">        return [target performSelector:action withObject:params];</div><div class="line">#pragma clang diagnostic pop</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一句话简介：CTMediator为casa大神针对iOS组件化方案的一个架构实例。&lt;/p&gt;
&lt;p&gt;架构详解: &lt;a href=&quot;http://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; re
    
    </summary>
    
      <category term="读过的源码" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>《函数式Swift》读书拾遗</title>
    <link href="/2016/08/16/%E3%80%8A%E5%87%BD%E6%95%B0%E5%BC%8FSwift%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8B%BE%E9%81%97/"/>
    <id>/2016/08/16/《函数式Swift》读书拾遗/</id>
    <published>2016-08-16T03:18:26.000Z</published>
    <updated>2016-08-18T09:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计良好的Swift函数式程序应该具有的一些特质：</p>
<ul>
<li>模块化</li>
<li>对可变状态的谨慎处理</li>
<li>类型</li>
</ul>
<blockquote>
<p>避免使用程序状态和可变对象，是降低程序复杂度的有效方式之一，而这也正是函数式编程的精髓。</p>
</blockquote>
<h3 id="函数式思想"><a href="#函数式思想" class="headerlink" title="函数式思想"></a>函数式思想</h3><h4 id="1-常规的重构思路"><a href="#1-常规的重构思路" class="headerlink" title="1. 常规的重构思路"></a>1. 常规的重构思路</h4><p>抽象实体，扩展方法，逻辑复杂之后抽象出辅助方法</p>
<h4 id="2-函数式"><a href="#2-函数式" class="headerlink" title="2. 函数式"></a>2. 函数式</h4><blockquote>
<p>函数式编程的核心理念就是函数是值。（因此函数的typealias的命名规则应与类、结构体相同）</p>
</blockquote>
<p>实例代码链式版本：</p>
<blockquote>
<p>这个例子是你在编写战舰类游戏时可能需要实现的一个核心函数。我们把将要看到的问题归结为,判断一个给定的点是否在射程范围内,并且距离友方船舶和我们自身都不太近。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">typealias</span> <span class="type">Distance</span> = <span class="type">Double</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></div><div class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Position</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minus</span><span class="params">(p: Position)</span></span> -&gt; <span class="type">Position</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Position</span>(x: x - p.x, y: y - p.y)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> length: <span class="type">Double</span> &#123;</div><div class="line">        <span class="keyword">return</span> sqrt(x * x + y * y)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ship</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> position: <span class="type">Position</span></div><div class="line">    <span class="keyword">var</span> firingRange: <span class="type">Distance</span></div><div class="line">    <span class="keyword">var</span> unsafeRange: <span class="type">Distance</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Region</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> lookup: <span class="type">Position</span> -&gt; <span class="type">Bool</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Region</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">circle</span><span class="params">(redius: Distance)</span></span> -&gt; <span class="type">Region</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> point.length &lt;= redius &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shift</span><span class="params">(offset: Position)</span></span> -&gt; <span class="type">Region</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point.minus(offset)) &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">invert</span><span class="params">()</span></span> -&gt; <span class="type">Region</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> !<span class="keyword">self</span>.lookup(point) &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(region: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point) &amp;&amp; region.lookup(point) &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">union</span><span class="params">(region: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point) || region.lookup(point) &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">difference</span><span class="params">(minus: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.intersection(minus.invert())</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Ship</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canSafelyEngageShip</span><span class="params">(target: Ship, friendly: Ship)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> unsafeRegion = <span class="type">Region</span>.circle(<span class="keyword">self</span>.unsafeRange)</div><div class="line">        <span class="keyword">let</span> maxfireRegion = <span class="type">Region</span>.circle(<span class="keyword">self</span>.firingRange)</div><div class="line">        <span class="keyword">let</span> rangeRegion = maxfireRegion.difference(unsafeRegion)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> firingRegion = rangeRegion.shift(position)</div><div class="line">        <span class="keyword">let</span> friendlyRegion = unsafeRegion.shift(friendly.position)</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> resultRegion = firingRegion.difference(friendlyRegion)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> resultRegion.lookup(target.position)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> myShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">2</span>, y: <span class="number">2</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</div><div class="line"><span class="keyword">let</span> enemyShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">5</span>, y: -<span class="number">7</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</div><div class="line"><span class="keyword">let</span> friendShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">5</span>, y: -<span class="number">5</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</div><div class="line"></div><div class="line">myShip.canSafelyEngageShip(enemyShip, friendly: friendShip)</div></pre></td></tr></table></figure>
<h3 id="类型驱动开发"><a href="#类型驱动开发" class="headerlink" title="类型驱动开发"></a>类型驱动开发</h3><blockquote>
<p>函数生成器，生成预设参数的专用函数。</p>
</blockquote>
<p>一些优势：</p>
<ul>
<li>安全</li>
<li>模块化</li>
<li>清晰易懂</li>
</ul>
<p>柯里化带来的一些好处（重点在于统一类型）：</p>
<blockquote>
<p>按照柯里化⻛格来定义滤镜,我们可以很容易地使用 &gt;&gt;&gt; 运算符将它们进行组合。假如我们用这些函数未柯里化的版本来构建滤镜的话,虽然依然可以写出相同的滤镜,但是这些滤镜的类型将根据它们所接受的参数不同而略有不同。这样一来,想要为这些不同类型的滤镜定义一个统一的组合运算符就要比现在困难得多了。</p>
</blockquote>
<p>自己的感受就是利于统一类型，将额外的参数都包装在生成的函数中，只保留源作为参数，加工之后的结果作为输出，方便对于函数类型的抽象。</p>
<h3 id="Map、Filter和Reduce"><a href="#Map、Filter和Reduce" class="headerlink" title="Map、Filter和Reduce"></a>Map、Filter和Reduce</h3><blockquote>
<p>接受其它函数作为参数的函数有时被称为<em>高阶函数</em>。</p>
</blockquote>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">        <span class="keyword">var</span> result: [<span class="type">T</span>] = [] </div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">            result.append(transform(x))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由顶层函数转为了协议扩展，这样做的优点是自动补全更完善，暧昧的命名更少，以及（通常）代码结构更清晰。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</div><div class="line">        <span class="keyword">var</span> result: [<span class="type">Element</span>] = []</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> <span class="keyword">where</span> includeElement(x) &#123;</div><div class="line">            result.append(x) </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;T&gt;<span class="params">(initial: T, combine: <span class="params">(T, Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</div><div class="line">        <span class="keyword">var</span> result = initial <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">            result = combine(result, x) </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用reduce实现map跟filter的版本</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapUsingReduce</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> result + [transform(x)]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterUsingReduce</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> includeElement(x) ? result + [x] : result</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="泛型和Any类型"><a href="#泛型和Any类型" class="headerlink" title="泛型和Any类型"></a>泛型和Any类型</h4><blockquote>
<p>Any类型和泛型两者都能用于定义接受两个不同类型参数的函数。然而，理解两者之间的区别至关重要：泛型可以用于定义灵活的函数，类型检查仍然由编译器负责；而Any类型则可以避开Swift的类型系统（所以应该尽可能避免使用）。</p>
</blockquote>
<p>使用泛型允许你无需牺牲类型安全就能够在编译器的帮助下写出灵活的函数；如果使用Any类型，那你就真的孤立无援了。</p>
<h3 id="可选值"><a href="#可选值" class="headerlink" title="可选值"></a>可选值</h3><h4 id="？？操作符"><a href="#？？操作符" class="headerlink" title="？？操作符"></a>？？操作符</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">in</span> x <span class="keyword">operator</span>??</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: T)</span></span> -&gt; <span class="type">T</span> &#123; </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">optional</span> &#123;</div><div class="line">        <span class="keyword">return</span> x </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> defaultValue </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//为了避免defaultValue的无效求值</span></div><div class="line"><span class="keyword">in</span> x <span class="keyword">operator</span> ?? &#123; <span class="keyword">associativity</span> <span class="keyword">right</span> <span class="keyword">precedence</span> <span class="number">110</span> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, @autoclosure defaultValue: <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123; </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">optional</span> &#123;</div><div class="line">        <span class="keyword">return</span> x </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> defaultValue()</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="分支上的可选值"><a href="#分支上的可选值" class="headerlink" title="分支上的可选值"></a>分支上的可选值</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//switch中的使用</span></div><div class="line"><span class="keyword">switch</span> madridPopulation &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>?: <span class="built_in">print</span>(<span class="string">"Nobody in Madrid"</span>)</div><div class="line">    <span class="keyword">case</span> (<span class="number">1</span>..&lt;<span class="number">1000</span>)?: <span class="built_in">print</span>(<span class="string">"Less than a million in Madrid"</span>) </div><div class="line">    <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">let</span> x): <span class="built_in">print</span>(<span class="string">"<span class="subst">\(x)</span> people in Madrid"</span>)</div><div class="line">    <span class="keyword">case</span> .<span class="type">None</span>: <span class="built_in">print</span>(<span class="string">"We don't know about Madrid"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//guard中的使用</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">populationDescriptionForCity</span><span class="params">(city: String)</span></span> -&gt; <span class="type">String</span>? &#123; </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> population = cities[city] <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">"The population of Madrid is <span class="subst">\(population * <span class="number">1000</span>)</span>"</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="可选映射"><a href="#可选映射" class="headerlink" title="可选映射"></a>可选映射</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(transform: Wrapped -&gt; U)</span></span> -&gt; <span class="type">U</span>? &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> x = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">        <span class="keyword">return</span> transform(x) </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(f: Wrapped -&gt; U?)</span></span> -&gt; <span class="type">U</span>? &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> x = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">        <span class="keyword">return</span> f(x) </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="为什么使用可选值？"><a href="#为什么使用可选值？" class="headerlink" title="为什么使用可选值？"></a>为什么使用可选值？</h4><p>避免参数不合法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSParameterAssert(param);</div></pre></td></tr></table></figure>
<p>可选类型标识了失败的可能性，类型系统将有助于你捕捉难以察觉的错误。其中一些错误很容易在开发过程中被发现，但是其余的可能会一直留存到生产代码中去。坚持使用可选值能够从根本上杜绝这类错误。</p>
<h3 id="QuickCheck"><a href="#QuickCheck" class="headerlink" title="QuickCheck"></a>QuickCheck</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;设计良好的Swift函数式程序应该具有的一些特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;对可变状态的谨慎处理&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="读过的书" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS屏幕旋转那些事</title>
    <link href="/2016/08/01/iOS%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>/2016/08/01/iOS屏幕旋转那些事/</id>
    <published>2016-08-01T13:10:55.000Z</published>
    <updated>2016-08-02T07:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文屏幕旋转方案仅限于兼容iOS8+</p>
</blockquote>
<h3 id="1-从APP层次谈起"><a href="#1-从APP层次谈起" class="headerlink" title="1. 从APP层次谈起"></a>1. 从APP层次谈起</h3><p>APP常见的布局层次如下图所示：<br><img src="http://alithink.com/img/5rotate/app layer.png" alt="app layer.png"><br>当工程目标开启了多个屏幕方向之后，具体类中有关屏幕旋转的配置其实只与当前屏幕展示模块的最外层VC容器有关。<br>但由于往往存在容器中某些VC针对屏幕旋转的个性化配置，所以需要进行从里层VC到外层容器的旋转状态传递。例如： </p>
<ul>
<li>里层UIViewController的配置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</div><div class="line">    <span class="keyword">return</span> .<span class="type">Portrait</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</div><div class="line">    <span class="keyword">return</span> .<span class="type">Portrait</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>自定义UINavigationController的配置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.shouldAutorotate() ?? <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.supportedInterfaceOrientations() ?? .<span class="type">Portrait</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.preferredInterfaceOrientationForPresentation() ?? .<span class="type">Portrait</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>自定义UITabBarController的配置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.shouldAutorotate() ?? <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.supportedInterfaceOrientations() ?? .<span class="type">Portrait</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.preferredInterfaceOrientationForPresentation() ?? .<span class="type">Portrait</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-AppDelegate配置"><a href="#2-AppDelegate配置" class="headerlink" title="2. AppDelegate配置"></a>2. AppDelegate配置</h3><p>按照上面的方法配置好后，就可以自由的控制转屏了，但在某些情况下会存在问题，举个例子：假如A页面屏幕锁定为竖屏，点击A页面的一个按钮跳转到了B页面（方式存在push跟present两种），B页面是可以进行横竖屏旋转的，当B页面旋转至横屏，这时候点击返回，会发现A页面也变成横屏展示了，而且无法通过屏幕旋转恢复到竖屏展示。这时候下面这个代理方法就排上用场了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, supportedInterfaceOrientationsForWindow window: UIWindow?)</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;    </div><div class="line">    <span class="comment">// 限定所有present的模态视图只能竖屏</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.window?.rootViewController?.presentedViewController != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="type">Portrait</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 限定容器中当前展示的为RotateDetailViewController的实例时可以旋屏，其余页面只能竖屏</span></div><div class="line">    <span class="keyword">let</span> baseTabBarController = <span class="keyword">self</span>.window?.rootViewController <span class="keyword">as</span>? <span class="type">BaseTabBarController</span></div><div class="line">    <span class="keyword">if</span> ((baseTabBarController?.selectedViewController <span class="keyword">as</span>? <span class="type">BaseNavigationController</span>)?.topViewController <span class="keyword">is</span> <span class="type">RotateDetailViewController</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="type">AllButUpsideDown</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> .<span class="type">Portrait</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-强制旋屏"><a href="#3-强制旋屏" class="headerlink" title="3. 强制旋屏"></a>3. 强制旋屏</h3><blockquote>
<p>前提条件：该VC允许旋转</p>
</blockquote>
<ul>
<li>强制竖屏</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">forcePortrait</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> width = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</div><div class="line">    <span class="keyword">let</span> height = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> isLandscape = width &gt; height</div><div class="line">    <span class="keyword">if</span> isLandscape &#123;</div><div class="line">        <span class="keyword">let</span> device = <span class="type">UIDevice</span>.currentDevice()</div><div class="line">        <span class="keyword">let</span> number = <span class="type">NSNumber</span>(integer: <span class="type">UIInterfaceOrientation</span>.<span class="type">Portrait</span>.rawValue)</div><div class="line">        device.setValue(number, forKey: <span class="string">"orientation"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>强制横屏</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">forceLandScape</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">let</span> width = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</div><div class="line">    <span class="keyword">let</span> height = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> isLandscape = width &lt; height</div><div class="line">    <span class="keyword">if</span> isLandscape &#123;</div><div class="line">        <span class="keyword">let</span> device = <span class="type">UIDevice</span>.currentDevice()</div><div class="line">        <span class="keyword">let</span> number = <span class="type">NSNumber</span>(integer: <span class="type">UIInterfaceOrientation</span>.<span class="type">LandscapeRight</span>.rawValue)</div><div class="line">        device.setValue(number, forKey: <span class="string">"orientation"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上方案基本可以搞定大部分的屏幕旋转场景了。如果APP的产品需求中主体为固定方向，只要求对弹出(present)模态视图进行旋转的话，可以参考下面这篇文章：<br><a href="http://swiftiostutorials.com/ios-orientations-landscape-orientation-one-view-controller/" target="_blank" rel="external">iOS Orientations: Landscape orientation for only one View Controller</a><br>这么做会更加方便一些，但问题是这种方案对于push模式的场景并不适用，需要结合以上方案综合解决。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文屏幕旋转方案仅限于兼容iOS8+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-从APP层次谈起&quot;&gt;&lt;a href=&quot;#1-从APP层次谈起&quot; class=&quot;headerlink&quot; title=&quot;1. 从APP层次谈起&quot;&gt;&lt;/a&gt;1.
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Charts诊疗日志</title>
    <link href="/2016/07/25/Charts%E8%AF%8A%E7%96%97%E6%97%A5%E5%BF%97/"/>
    <id>/2016/07/25/Charts诊疗日志/</id>
    <published>2016-07-25T07:41:16.000Z</published>
    <updated>2016-07-26T06:57:43.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用Charts有一段时间了，期间遇到了一些现有版本存在的问题，特作此记录。<br><a href="https://github.com/danielgindi/Charts" target="_blank" rel="external">Charts传送门</a></p>
</blockquote>
<h2 id="病症1-组合图-CombinedChartView-弹出MarkerView位置不对"><a href="#病症1-组合图-CombinedChartView-弹出MarkerView位置不对" class="headerlink" title="病症1.组合图(CombinedChartView)弹出MarkerView位置不对"></a>病症1.组合图(CombinedChartView)弹出MarkerView位置不对</h2><h3 id="病症表象如下图："><a href="#病症表象如下图：" class="headerlink" title="病症表象如下图："></a>病症表象如下图：</h3><p><img src="http://alithink.com/img/4charts/combine.png" alt="combine.png"></p>
<p>截图为想要的结果（修复后的效果），实际情况为弹出的Marker没有显示在对应折线图的数据点上。</p>
<h3 id="患病位置如下图："><a href="#患病位置如下图：" class="headerlink" title="患病位置如下图："></a>患病位置如下图：</h3><p><img src="http://alithink.com/img/4charts/chart_marker.png" alt="chart_marker.png"></p>
<h3 id="治疗方案："><a href="#治疗方案：" class="headerlink" title="治疗方案："></a>治疗方案：</h3><p>BarLineChartViewBase -&gt; getMarkerPosition  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pt = <span class="type">CGPoint</span>(x: xPos, y: yPos * _animator.phaseY)</div></pre></td></tr></table></figure>
<p>在pt初始化之后添加如下分支：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">self</span> <span class="keyword">is</span> <span class="type">CombinedChartView</span> &#123;</div><div class="line">    <span class="keyword">let</span> combinedChartView = <span class="keyword">self</span> <span class="keyword">as</span>! <span class="type">CombinedChartView</span></div><div class="line">    <span class="keyword">let</span> combinedChartData = _data <span class="keyword">as</span>! <span class="type">CombinedChartData</span></div><div class="line">            </div><div class="line">    <span class="keyword">if</span> highlight.dataIndex &gt;= <span class="number">0</span> &amp;&amp; highlight.dataIndex &lt; combinedChartView.drawOrder.<span class="built_in">count</span> &#123;</div><div class="line">        <span class="keyword">let</span> chartType =  <span class="type">CombinedChartView</span>.<span class="type">DrawOrder</span>(rawValue: combinedChartView.drawOrder.<span class="built_in">reverse</span>()[highlight.dataIndex])!</div><div class="line">        <span class="keyword">var</span> axisDependency = <span class="type">ChartYAxis</span>.<span class="type">AxisDependency</span>.<span class="type">Left</span></div><div class="line">                </div><div class="line">        <span class="keyword">switch</span> chartType &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">Bar</span>:</div><div class="line">            axisDependency = combinedChartData.barData.getDataSetByIndex(dataSetIndex)!.axisDependency</div><div class="line">        <span class="keyword">case</span> .<span class="type">Line</span>:</div><div class="line">            axisDependency = combinedChartData.lineData.getDataSetByIndex(dataSetIndex)!.axisDependency</div><div class="line">        <span class="keyword">case</span> .<span class="type">Bubble</span>:</div><div class="line">            axisDependency = combinedChartData.bubbleData.getDataSetByIndex(dataSetIndex)!.axisDependency</div><div class="line">        <span class="keyword">case</span> .<span class="type">Candle</span>:</div><div class="line">            axisDependency = combinedChartData.candleData.getDataSetByIndex(dataSetIndex)!.axisDependency</div><div class="line">        <span class="keyword">case</span> .<span class="type">Scatter</span>:</div><div class="line">            axisDependency = combinedChartData.scatterData.getDataSetByIndex(dataSetIndex)!.axisDependency</div><div class="line">        &#125;</div><div class="line">        getTransformer(axisDependency).pointValueToPixel(&amp;pt)</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    getTransformer(data.getDataSetByIndex(dataSetIndex)!.axisDependency).pointValueToPixel(&amp;pt)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>此处drawOrder.reverse()要做reverse的原因是highlight里面记录的dataIndex的顺序正好与drawOrder数组的顺序相反，例如drawOrder为[Bar, Line],那么对应的Bar的dataIndex为1，Line的dataIndex为0。</p>
</blockquote>
<h3 id="总结分析"><a href="#总结分析" class="headerlink" title="总结分析"></a>总结分析</h3><p>CombinedChartView中包含的各类图形的数据会保存在独立的data属性中，例如柱状图的barData,折线图的lineData。因此原有的从统一data属性取得dataSet对应参考轴的操作就会返回错误的结果，以致因为选错了参考轴计算出了错误的Marker绘制位置。</p>
<h2 id="病症2-堆积图弹出MarkerView数值不对"><a href="#病症2-堆积图弹出MarkerView数值不对" class="headerlink" title="病症2.堆积图弹出MarkerView数值不对"></a>病症2.堆积图弹出MarkerView数值不对</h2><h3 id="病症表象如下图：-1"><a href="#病症表象如下图：-1" class="headerlink" title="病症表象如下图："></a>病症表象如下图：</h3><p><img src="http://alithink.com/img/4charts/stack.png" alt="stack.png"></p>
<p>截图为想要的结果（修复后的效果），实际情况为弹出的Marker总是显示所有柱子的叠加值。</p>
<h3 id="治疗方案：-1"><a href="#治疗方案：-1" class="headerlink" title="治疗方案："></a>治疗方案：</h3><p>BalloonMarker -&gt; refreshContent</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> entry <span class="keyword">is</span> <span class="type">BarChartDataEntry</span> &amp;&amp; highlight.stackIndex != -<span class="number">1</span> &#123;</div><div class="line">    <span class="keyword">let</span> chartEntry = entry <span class="keyword">as</span>! <span class="type">BarChartDataEntry</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> values = chartEntry.values &#123;</div><div class="line">        configLabelns(entry, value: values[highlight.stackIndex])</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    configLabelns(entry)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先目前只有柱状图支持堆积展现，并且进行堆积展示的BarChartDataEntry有一个values属性用于存放该列的所有堆积值；stackIndex用于标示当前点击的柱子从下往上的序列，例如最下面的柱子为0，之上一个为1，依次递增。</p>
</blockquote>
<h3 id="总结分析-1"><a href="#总结分析-1" class="headerlink" title="总结分析"></a>总结分析</h3><p>默认的Marker处理值展示的时候，没有考虑到堆积图的特殊性，统一从entry的value属性进行取值，导致最终展现的数值不是我们想要的结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用Charts有一段时间了，期间遇到了一些现有版本存在的问题，特作此记录。&lt;br&gt;&lt;a href=&quot;https://github.com/danielgindi/Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Char
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>《世界简史》略读</title>
    <link href="/2016/07/20/%E3%80%8A%E4%B8%96%E7%95%8C%E7%AE%80%E5%8F%B2%E3%80%8B%E7%95%A5%E8%AF%BB/"/>
    <id>/2016/07/20/《世界简史》略读/</id>
    <published>2016-07-20T12:50:49.000Z</published>
    <updated>2016-07-25T07:30:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命的起源"><a href="#生命的起源" class="headerlink" title="生命的起源"></a>生命的起源</h3><ul>
<li>沉积岩（岩石记录）大致可以了解到16亿年前的生命形态。</li>
<li>包含着生命迹象的最初的岩石称为原生岩。</li>
</ul>
<blockquote>
<p>古生代早期：比较低等的生物遗迹如水生贝类的贝壳、植物状动物的花状头、海藻、沙蚕类的甲壳类生物足迹和骨骼化石。<br>三叶虫：最早出生的生物，跟蚜虫十分相似，他们能像蚜虫那样把身体卷成球状。<br>海蝎：过了几百万年出现，比之前的生物更灵活有力</p>
</blockquote>
<h3 id="鱼类时期"><a href="#鱼类时期" class="headerlink" title="鱼类时期"></a>鱼类时期</h3><h4 id="生物区别于非生命体的两个特征："><a href="#生物区别于非生命体的两个特征：" class="headerlink" title="生物区别于非生命体的两个特征："></a>生物区别于非生命体的两个特征：</h4><ul>
<li>能够通化其他物质，使其成为自身的一部分（吃东西）。</li>
<li>可以再造自己（繁衍后代）。</li>
</ul>
<blockquote>
<p>鱼类时期（泥盆季）：大约在5亿年以前，已知的最早的脊椎动物。他们起初的样子跟现在的鲨鱼、鲟鱼有些相似。</p>
</blockquote>
<h3 id="石炭纪沼泽期"><a href="#石炭纪沼泽期" class="headerlink" title="石炭纪沼泽期"></a>石炭纪沼泽期</h3><p>植物先于动物移居到陆地上。</p>
<blockquote>
<p>植物：大型湿地木质植物，如木质苔藓、木质蕨类、巨型木贼等。<br>动物：蜈蚣、马路、原生昆虫（体型较大，如巨型蜻蜓）、蜘蛛蝎子的祖先，随后脊椎动物登陆。<br>肺的进化。<br>末期温度剧烈变化，沼泽地植物完全消失，煤炭层的形成基础。</p>
</blockquote>
<h3 id="爬行动物时期"><a href="#爬行动物时期" class="headerlink" title="爬行动物时期"></a>爬行动物时期</h3><ul>
<li>卵生，在孵化完成前就已经接近发育的成熟阶段。</li>
<li>出现了结籽植物。</li>
</ul>
<blockquote>
<p>爬行动物时期（中生代）：持续到距今大约8000万年以前，之前称为古生代和无生代（共14亿年）。中生代大约持续了两亿年以上。之后称为新生代。<br>动物：各种恐龙以及其他爬行动物。</p>
</blockquote>
<h3 id="哺乳动物时期"><a href="#哺乳动物时期" class="headerlink" title="哺乳动物时期"></a>哺乳动物时期</h3><p>此时的地图版图和现在的世界地图看起来有些大致相似了。<br>新生代与中生代生物的最根本区别，在于它们的精神生活不同。这种差别就其本质来说，主要是来源于母体和后代之间不同程度的接触。爬行动物和后代几乎没有接触。除个别特例之外，爬行动物在产卵之后就会自行离开，任其自生自灭。新生代以哺育和抚养后代为特点。</p>
<blockquote>
<p>灵长目：狐猿、猿、类人猿和人（解刨学上的相似性）<br>一共四次冰河时期。第一次距今60万年，最后一次距今约5万年。最后一次冰河时期，类人猿开始出现。<br>新石器时代：大约在10000到12000年以前。</p>
</blockquote>
<h3 id="文明雏形"><a href="#文明雏形" class="headerlink" title="文明雏形"></a>文明雏形</h3><p>大约公元前6000年</p>
<h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ul>
<li>字母文字<ul>
<li>苏美尔：楔形文字</li>
<li>埃及：象形文字</li>
</ul>
</li>
<li>中国：象形文字</li>
</ul>
<h4 id="汉谟拉比法典"><a href="#汉谟拉比法典" class="headerlink" title="汉谟拉比法典"></a>汉谟拉比法典</h4><p>公元前2100年巴比伦帝国</p>
<h3 id="犹太人"><a href="#犹太人" class="headerlink" title="犹太人"></a>犹太人</h3><ul>
<li>希伯来人-闪米特系的民族。</li>
<li>公元前1000年之前，就定居在犹地亚，首都一直是耶路撒冷。</li>
<li>《旧约》（希伯来圣经），公元前4世纪或5世纪。</li>
</ul>
<h3 id="希腊文明"><a href="#希腊文明" class="headerlink" title="希腊文明"></a>希腊文明</h3><p>促使希腊各个城邦形成一个整体的原因： </p>
<ul>
<li>史诗</li>
<li>每四年在奥林匹亚举行一次奥运会</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;生命的起源&quot;&gt;&lt;a href=&quot;#生命的起源&quot; class=&quot;headerlink&quot; title=&quot;生命的起源&quot;&gt;&lt;/a&gt;生命的起源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;沉积岩（岩石记录）大致可以了解到16亿年前的生命形态。&lt;/li&gt;
&lt;li&gt;包含着生命迹象的最初的岩石称为
    
    </summary>
    
      <category term="读过的书" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>联通旧事</title>
    <link href="/2016/07/08/%E8%81%94%E9%80%9A%E6%97%A7%E4%BA%8B/"/>
    <id>/2016/07/08/联通旧事/</id>
    <published>2016-07-08T12:37:56.000Z</published>
    <updated>2016-07-11T06:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>时间：2011.3~2013.6</p>
</blockquote>
<h3 id="初来乍到"><a href="#初来乍到" class="headerlink" title="初来乍到"></a>初来乍到</h3><blockquote>
<p>出场人物代号简介：<br>我：初出茅庐的Java小菜鸟</p>
</blockquote>
<p>　　那是一个属于Java的年代（^_^其实现在依然如此）。但造化弄人一直没有长时间从事相关工作。在浪潮实习的时候用了C#，在另一个伤心之地（实在不想提。。唉。。）用了一盏茶的J2EE和PB，而后我来到了联通。<br>　　面试时问的问题都是J2EE相关的，于是顺利的加入了经分数据组😂（跟J2EE几乎没半毛钱关系，这就是命吧，不过现在回想，还是要感谢一下命运之神）。时间太久，忘记当时的心情了，只依稀记得当时坐到工位上，时而会慨叹：“也许我就要跟数据库、etl和shell搞一辈子了吧”。</p>
<h3 id="误打误撞"><a href="#误打误撞" class="headerlink" title="误打误撞"></a>误打误撞</h3><blockquote>
<p>出场人物代号简介:<br>川哥：掌分项目的发起者<br>老孟：掌分项目组长以及同甘共苦过的兄弟</p>
</blockquote>
<p>　　同事领导都挺好，身边也有不少同学，所以日子过得还算温馨舒适。然后突然有一天命运的轨迹就发生了改变，在集团常驻的川哥发起了掌上经分项目（仅限iOS端）。  </p>
<blockquote>
<p>回想当时iOS生态圈的境况为：<br>目标设备：iPhone3G、3GS、iPad1<br>iOS版本: iOS4.x<br>开发设备：iMac、黑苹果(t410黑)<br>开发环境：那是一个Xcode与Interface builder分离的时代</p>
</blockquote>
<p>　　迷迷瞪瞪的就跟老孟被安排进了掌分项目组，当时对于OSX（现在应该叫macOS啦）和iOS一无所知，唯一的学习资料是一本iPhone开发书籍（名字忘掉了，这本书其中之一的作者以外包团队领头人的身份加入了项目）。项目的第一个版本主要由外包团队负责研发，但是我跟老孟需要尽快的融入进来，借助项目快速上手iOS开发，然后将项目接手过来（最大限度的节省外包费用，😂据说最后也没有把外包团队的费用完全结清）。</p>
<h3 id="小有所成"><a href="#小有所成" class="headerlink" title="小有所成"></a>小有所成</h3><blockquote>
<p>军军：外包团队主力开发<br>苟工：外包团队领头人</p>
</blockquote>
<p>　　那是一个几乎没有轮子的时代，或者说当时都还没有使用过github的我没有具备找轮子的能力。所以几乎所有的东西都是从零做起，走过的坑不少，但是收获也很大，很快就可以上手一些简单模块的开发了。说起成长的喜悦，记得兄弟们一起加班时的免费餐补报销，加班九点之后的打车报销以及写出bug后大家开玩笑的声讨书（那超大字号的白底黑字，打开屏幕吓出一身冷汗来）。<br>　　这里要感谢下苟工当时对于delegate的悉心讲解，感谢军军同志对于我冒出的各种问题的耐心解答。
　　</p>
<h3 id="北京你好"><a href="#北京你好" class="headerlink" title="北京你好"></a>北京你好</h3><blockquote>
<p>博士：名副其实的博士，会议室加班常客，只因为大家都叫他博士，导致往往有些人都不记得他叫什么名字了，但是我记得，因为他跟托塔李天王重名^_^<br>文哥：目前公司的领导</p>
</blockquote>
<p>　　当领导让你出差，但是又不明确说多少天的时候，你就应该明白我可能一时半会回不来了😂。就这样，北京，我来了。<br>　　在项目的初版汇报通过之后，我们来到了北京金融街21号-联通集团总部，开始了现场开发支持工作。想象过一个人提着iMac盒子出差的感受吗，回想起来，好心酸，胳膊也好酸。。。<br>　　常驻联通会议室之后，发现一个真相，原来工作之后需要掌握的一项重要技能就是做PPT。逐级的汇报，不停的过片子，修改字眼与内容的组织是博士经常加班到很晚的原因。记得我们晚上从集团运动区打完球回来，还能经常享受到博士亲切地问候。<br>　　博士给我留下了很深刻的印象，跟现在的文哥有一拼，为人温文尔雅，专业知识过硬，处事细致全面，知识面很广，仿佛所有的东西都有所涉猎并且见解独特。（这里声明下，绝无拍马屁之嫌）<br>　　集团的食堂也给我留下了不少美味的回忆，超值的早餐、便宜好吃的肉龙等等，现在想想当时没有胖起来真是个奇迹。（然而在我的不懈努力下，现在终于还是胖起来了）
　　</p>
<h3 id="重新来过"><a href="#重新来过" class="headerlink" title="重新来过"></a>重新来过</h3><p>　　终于热更新这个问题被提出来了，Native开发的最大不足其实就是这里了。当时没有如今大行其道的JSPatch、风风火火的React Native，于是开发一时进入了瓶颈。想过不少方案都没有很好的解决这个问题，于是川哥决定借助现有的成熟平台换一个架构重新来过。<br>　　经过几轮讨论之后，确定了MicroStrategy的方案，至今跟厂商的几个伙伴还保持着联系，毕竟国内懂得定制化改造MSTR SDK的iOS开发者估计不算多，当时一起讨论了不少问题，还乔装成他们的技术人员去帮他们紧急搞定了一个项目^_^。<br>　　实体、事实、度量、选择器、报表、文档、智能立方体、缓存、权限。。。接触了不少商业智能常见的概念与功能。起初是比较排斥的，因为借助第三方平台就基本失去了实际编写功能代码的机会了（因为涉及二次开发，针对MSTR SDK套壳的部分还是需要编写的）。但转念一想既然改变的势头已无法扭转，那只有硬着头皮顺流而行了。因为处女座的特质，让我在很短的时间内就掌握了MSTR的基本功能，有疑惑的地方就联系厂商技术支持，所以很快MSTR版本的掌分就搞出来了。</p>
<blockquote>
<p>心里话：<br>不知道现在掌分的状况如何了，个人一直觉得中途换成MSTR的方案并不是一个明智的选择，原因如下：  </p>
<ol>
<li>APP其实往往不需要彻底的动态性，内容的动态性往往可以通过产品向的方案进行解决。  </li>
<li>MSTR的权限以及缓存模型是基于用户的，而用户又涉及到license的费用计算，一旦涉及到费用就会衍生出不少扯皮的事情；反观自主开发的APP这部分配置就非常灵活。  </li>
<li>这点我觉得最重要，那就是APP存在的重要意义之一其实就是她极致的用户体验，如果在动态性与极致用户体验之一做个权衡的话，会毫不犹豫的以保证后者为先。（尤其在企业应用的范畴内，省掉了App Store的审核成本，版本的迭代速度可以非常快，版本的更新提示反而可以算作是对于用户的一种引导）</li>
</ol>
</blockquote>
<h3 id="北京再见"><a href="#北京再见" class="headerlink" title="北京再见"></a>北京再见</h3><blockquote>
<p>朋友们：东儿、芳芳*2、小杜、传奇、夺儿等（排名不分先后）</p>
</blockquote>
<p>　　来到北京最开心的回忆就是跟一起出差的朋友们几乎游遍了京城所有可玩的地方。故宫、天坛、长城、颐和园、南锣鼓巷、后海、雍和宫、国家博物馆、国家图书馆、鸟巢、水立方、清华北大、前门、王府井、西单、三里屯（优衣库试衣间）等。借老孟跟东儿的单反留下了不少记忆的片段，现在还经常看一下当时的照片，回味当初那份单纯的快乐，这份快乐只属于那段日子，那个年纪。（着重提一下，菜市口附近教子胡同里面的一个麻辣烫小店，里面的辣椒太tm过瘾了。。。）<br>　　唯一不变的就是变化，突然因为项目成本的原因（还有一些其他原因）研发团队就回到了济南。模式变为了济南团队研发结束提交变更，留守在集团的老孟负责向领导进行汇报安装。  </p>
<blockquote>
<p>说说这段日子的收获：  </p>
<ol>
<li>扩展视野、吃喝玩乐、结交朋友算是一方面😜。  </li>
<li>中途也参加了一些iOS精通类以及用户体验类的培训，总算是给我这个自学党补了补漏。  </li>
<li>接触MSTR，熟悉了主流报表平台的常用概念以及构建流程；通过对SDK的二次开发，为了实现一些奇葩需求，了解了不少iOS相关的黑魔法（swizzling、runtime等）</li>
</ol>
</blockquote>
<h3 id="联通再见"><a href="#联通再见" class="headerlink" title="联通再见"></a>联通再见</h3><p>　　人忙起来往往没时间去想太多其他事情，可一旦闲下来，然后再有不爽的任务压过来时，就往往会思考权衡下自己将来要走的路了。当掌分的工作暂时告一段落，领导打算安排去做其他数据加工审核相关工作的时候，心里总是有种排斥感。那段时间心里总是有个声音在问自己，将来到底想做什么。联通的生活确实很安逸舒适，但自己内心坚持移动端研发方向，所以最后还是选择了离开。    </p>
<blockquote>
<p>后记：<br>在联通工作的这段日子，结识了伙伴，扩展了视野，最重要的是确定了自己下一步该走的路。<br>感谢那段时光，感谢那段日子有你们相伴。年轻万岁，青春无悔。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;时间：2011.3~2013.6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;初来乍到&quot;&gt;&lt;a href=&quot;#初来乍到&quot; class=&quot;headerlink&quot; title=&quot;初来乍到&quot;&gt;&lt;/a&gt;初来乍到&lt;/h3&gt;&lt;blockquote&gt;
&lt;
    
    </summary>
    
      <category term="回忆录" scheme="/categories/%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>《禅与 Objective-C 编程艺术》读书拾遗</title>
    <link href="/2016/07/01/%E3%80%8A%E7%A6%85%E4%B8%8E%20Objective-C%20%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8B%BE%E9%81%97/"/>
    <id>/2016/07/01/《禅与 Objective-C 编程艺术》读书拾遗/</id>
    <published>2016-07-01T02:49:23.000Z</published>
    <updated>2016-08-02T08:17:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>纯粹拾遗性质的读书笔记，只记录知识体系尚模糊的内容<br>原文链接：<a href="https://github.com/oa414/objc-zen-book-cn#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B" target="_blank" rel="external">《禅与 Objective-C 编程艺术》</a></p>
</blockquote>
<h3 id="1-条件语句"><a href="#1-条件语句" class="headerlink" title="1.条件语句"></a>1.条件语句</h3><ul>
<li>善用return, 将主流程从分支中脱离</li>
</ul>
<h3 id="2-命名"><a href="#2-命名" class="headerlink" title="2.命名"></a>2.命名</h3><ul>
<li>常量 static NSString * const ZOCCacheNotification(尽量避免使用宏，除非真的需要用到她)</li>
<li>with连接 取代and</li>
<li>字面量<ul>
<li>不可变集合尽量使用字面量赋值</li>
<li>可变集合避免[@[] mutableCopy]</li>
</ul>
</li>
</ul>
<h3 id="3-类"><a href="#3-类" class="headerlink" title="3.类"></a>3.类</h3><ul>
<li>类命名规范：ZOC(前缀)+Twitter(子类)+NetworkClient(父类)</li>
<li>推荐代码组织顺序：<ul>
<li>dealloc(MRC)</li>
<li>init<ul>
<li>designated initializer</li>
<li>secondary initializer</li>
</ul>
</li>
</ul>
</li>
<li>init的可失败性</li>
<li>提供自己的初始化函数的三个步骤<ul>
<li>定义你的designated initializer, 确保调用了直接超类designated initializer</li>
<li>重载直接超类的designated initializer。调用你的新的designated initializer</li>
<li>为新的designated initializer写文档</li>
</ul>
</li>
<li><p>类簇：</p>
<ul>
<li><p>简单示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@implementation ZOCKintsugiPhotoViewController</div><div class="line"></div><div class="line">- (id)initWithPhotos:(NSArray *)photos</div><div class="line">&#123;</div><div class="line">  		if ([self isMemberOfClass:ZOCKintsugiPhotoViewController.class]) &#123;</div><div class="line">      		self = nil;</div><div class="line"></div><div class="line">      		if ([UIDevice isPad]) &#123;</div><div class="line">          		self = [[ZOCKintsugiPhotoViewController_iPad alloc] initWithPhotos:photos];</div><div class="line">      		&#125;</div><div class="line">      		else &#123;</div><div class="line">          		self = [[ZOCKintsugiPhotoViewController_iPhone alloc] initWithPhotos:photos];</div><div class="line">      		&#125;</div><div class="line">      		return self;</div><div class="line">  		&#125;</div><div class="line">  		return [super initWithNibName:nil bundle:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>单例模式应该运用于类及类的接口趋向于作为单例来使用的情况</p>
</li>
<li>属性：<ul>
<li>NSString *text</li>
<li>总应该使用getter和setter</li>
<li>永远不要在init方法里面用getter和setter(dealloc中同样需要注意)</li>
<li>使用点符号会让表达更加清晰并且帮助区分属性访问和方法调用</li>
<li>属性定义推荐格式：@property (nonatomic, readwrite, copy) NSString *name;</li>
<li>BOOL类型推荐格式：@property (assign, getter=isEditable) BOOL editable;</li>
<li>通过readonly的属性暴露类内部可变属性的值</li>
</ul>
</li>
<li><p>相等性示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (BOOL)isEqual:(id)object &#123;</div><div class="line">   	if (self == object) &#123;</div><div class="line">     		return YES;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	if (![object isKindOfClass:[ZOCPerson class]]) &#123;</div><div class="line">     		return NO;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	return [self isEqualToPerson:(ZOCPerson *)object];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)isEqualToPerson:(Person *)person &#123;</div><div class="line">   	if (!person) &#123;</div><div class="line">       	return NO;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	BOOL namesMatch = (!self.name &amp;&amp; !person.name) ||</div><div class="line">                      [self.name isEqualToString:person.name];</div><div class="line">   	BOOL birthdaysMatch = (!self.birthday &amp;&amp; !person.birthday) ||</div><div class="line">                          [self.birthday isEqualToDate:person.birthday];</div><div class="line"></div><div class="line"> 		return haveEqualNames &amp;&amp; haveEqualBirthdays;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-Category"><a href="#4-Category" class="headerlink" title="4.Category"></a>4.Category</h3><ul>
<li>category方法前加上自己的小写前缀以及下划线，避免重名的category方法的覆盖不确定性</li>
<li>利用category创建方法分组可以用来更好地进行不同功能的表示，并且把类打破在更多自我包含的组成部分里</li>
</ul>
<h3 id="5-Protocols"><a href="#5-Protocols" class="headerlink" title="5.Protocols"></a>5.Protocols</h3><ul>
<li>当实现一个protocol你总应该坚持里氏替换原则。这个原则是：你应该可以取代任意接口实现，而不用改变客户端或者相关实现</li>
</ul>
<h3 id="6-NSNotification"><a href="#6-NSNotification" class="headerlink" title="6.NSNotification"></a>6.NSNotification</h3><ul>
<li>通知名定义示例：extern NSString * const ZOCFooDidBecomeBarNotification;</li>
</ul>
<h3 id="7-代码组织"><a href="#7-代码组织" class="headerlink" title="7.代码组织"></a>7.代码组织</h3><ul>
<li>清晰地组织代码和规范地进行定义，是你对自己以及其他阅读代码的人的尊重</li>
<li>善用代码块({})</li>
<li><p>pragma示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc &#123; /* ... */ &#125;</div><div class="line">- (instancetype)init &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - View Lifecycle （View 的生命周期）</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123; /* ... */ &#125;</div><div class="line">- (void)viewWillAppear:(BOOL)animated &#123; /* ... */ &#125;</div><div class="line">- (void)didReceiveMemoryWarning &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - Custom Accessors （自定义访问器）</div><div class="line"></div><div class="line">- (void)setCustomProperty:(id)value &#123; /* ... */ &#125;</div><div class="line">- (id)customProperty &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - IBActions  </div><div class="line"></div><div class="line">- (IBAction)submitData:(id)sender &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - Public</div><div class="line"></div><div class="line">- (void)publicMethod &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - Private</div><div class="line"></div><div class="line">- (void)zoc_privateMethod &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - UITableViewDataSource</div><div class="line"></div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123; /* ... */ &#125;</div><div class="line"></div><div class="line">#pragma mark - ZOCSuperclass</div><div class="line"></div><div class="line">// ... 重载来自 ZOCSuperclass 的方法</div><div class="line"></div><div class="line">#pragma mark - NSObject</div><div class="line"></div><div class="line">- (NSString *)description &#123; /* ... */ &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>#pragma unused</p>
</li>
<li>#error #warning</li>
</ul>
<h3 id="8-对象间的通讯"><a href="#8-对象间的通讯" class="headerlink" title="8.对象间的通讯"></a>8.对象间的通讯</h3><ul>
<li>Block<ul>
<li>把需要提供的数据和错误信息整合到一个单独block中，比分别提供成功和失败的block要好<ul>
<li>若objects不为nil,则error必须为nil</li>
<li>若objects为nil,则error必须不为nil</li>
</ul>
</li>
<li>三种方案的讨论（循环引用相关）</li>
</ul>
</li>
<li>委托和数据源<ul>
<li>委托模式：事件发生的时候，委托者需要通知代理者</li>
<li>数据源模式：委托者需要从数据源对象拉去数据<ul>
<li>重载代理方法：instancesRespondToSelector</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-面向切面编程"><a href="#9-面向切面编程" class="headerlink" title="9.面向切面编程"></a>9.面向切面编程</h3><ul>
<li>aspects</li>
<li>应用举例 统计与日志：<ul>
<li>预先留一个统计的配置文件，记录需要统计的类、方法跟标签</li>
<li>初始化时统一埋点</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纯粹拾遗性质的读书笔记，只记录知识体系尚模糊的内容&lt;br&gt;原文链接：&lt;a href=&quot;https://github.com/oa414/objc-zen-book-cn#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7
    
    </summary>
    
      <category term="读过的书" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>BI APP图形库选型</title>
    <link href="/2016/06/28/BI%20APP%E5%9B%BE%E5%BD%A2%E5%BA%93%E9%80%89%E5%9E%8B/"/>
    <id>/2016/06/28/BI APP图形库选型/</id>
    <published>2016-06-28T01:55:04.000Z</published>
    <updated>2016-08-02T07:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>BI中会涉及到不少图形可视化的应用，因为考虑到APP用户体验方面的需求（移动端版本主要面向集团领导使用），BI APP主要采用Native的图形可视化解决方案（当然Swift优先^_^）。</p>
<h3 id="涉及的图形类型"><a href="#涉及的图形类型" class="headerlink" title="涉及的图形类型"></a>涉及的图形类型</h3><p><img src="http://alithink.com/img/3bi/1.png" alt="BI show.png"></p>
<p>BI 中的各种图形图表都封装成了对应的卡片类型，根据接口的卡片类型描述动态生成对应的数据卡片进行展示。</p>
<h3 id="开源库选型"><a href="#开源库选型" class="headerlink" title="开源库选型"></a>开源库选型</h3><h4 id="1-Charts"><a href="#1-Charts" class="headerlink" title="1.Charts"></a>1.Charts</h4><blockquote>
<p>传送门：<a href="https://github.com/danielgindi/Charts" target="_blank" rel="external">https://github.com/danielgindi/Charts</a>  </p>
</blockquote>
<h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><p>主力图形库，常规图形的展示。</p>
<h5 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h5><ul>
<li>图形类型支持覆盖率较高，基本涵盖了所有常用的图形类型（组合图待完善中…）。</li>
<li>文档较完备，且iOS、Android平台接口一致，迁移成本低</li>
<li>图形库热度高，持续更新中。</li>
<li>较为优雅的动画支持、默认数据展示区域的控制、各种展示细节的灵活控制等。</li>
</ul>
<h4 id="2-ESArcProgressView"><a href="#2-ESArcProgressView" class="headerlink" title="2.ESArcProgressView"></a>2.ESArcProgressView</h4><blockquote>
<p>传送门：<a href="https://github.com/e-sites/ESArcProgressView" target="_blank" rel="external">https://github.com/e-sites/ESArcProgressView</a>  </p>
</blockquote>
<h5 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h5><p><img src="http://alithink.com/img/3bi/2.png" alt="Circle.png"></p>
<p>多层环形图（暂时这么称呼她吧）<br>其实是仿照的Apple Watch的Activity，不过确实比纯粹的柱状图更具美感一些^_^。</p>
<h5 id="优势：-1"><a href="#优势：-1" class="headerlink" title="优势："></a>优势：</h5><ul>
<li>其它的类似轮子还真没找到。。。</li>
<li>支持简单动画，不过需要手动处理下timer的runloop mode的问题。</li>
</ul>
<h4 id="3-XCL-Charts"><a href="#3-XCL-Charts" class="headerlink" title="3.XCL-Charts"></a>3.XCL-Charts</h4><blockquote>
<p>传送门：<a href="https://github.com/xcltapestry/XCL-Charts" target="_blank" rel="external">https://github.com/xcltapestry/XCL-Charts</a> </p>
</blockquote>
<h5 id="应用场景：-2"><a href="#应用场景：-2" class="headerlink" title="应用场景："></a>应用场景：</h5><p><img src="http://alithink.com/img/3bi/3.png" alt="android circle.png"></p>
<p>Android的多层环形图解决方案，XCL也是一个较为完备的Android图形库，不过相较来说库的成熟度没有Charts高，一些细节功能也存在一定程度的缺失。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>这里主要就Charts的问题解决方案进行一些分享：</p>
<h4 id="1-展示图形中的最后几个元素"><a href="#1-展示图形中的最后几个元素" class="headerlink" title="1. 展示图形中的最后几个元素"></a>1. 展示图形中的最后几个元素</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示可视区域的元素个数</span></div><div class="line">chartView?.setVisibleXRangeMaximum(<span class="number">6</span>)</div><div class="line">            </div><div class="line"><span class="comment">/*</span></div><div class="line"> * moveViewToX存在bug无法正确切换位置</div><div class="line"> * 调用此方法的前提条件是需要预先提供一个确定的frame</div><div class="line"> * xIndex为显示到的x元素的序列</div><div class="line"> */</div><div class="line">chartView?.moveViewToAnimated(xIndex: <span class="type">CGFloat</span>(xVals.<span class="built_in">count</span> - <span class="number">1</span>), yValue: <span class="number">0</span>, axis: <span class="type">ChartYAxis</span>.<span class="type">AxisDependency</span>.<span class="type">Left</span>, duration: <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>这里setVisibleXRangeMaximum设置的数目在grouped柱状图配置的时候记得要乘以单位组内柱子的数目并包含组之间间隔的空间（往往间隔的空间也算做一个柱子）。</p>
<h4 id="2-完整显示x轴所有的元素标签"><a href="#2-完整显示x轴所有的元素标签" class="headerlink" title="2. 完整显示x轴所有的元素标签"></a>2. 完整显示x轴所有的元素标签</h4><p>Charts默认自动计算相邻x轴元素标签的距离, 控制x轴部分标签的隐藏以达到较好的现实效果。但实际需求中往往会要求展示所有x轴的元素标签，那么就可以通过以下配置禁用默认的计算。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xAxis?.setLabelsToSkip(<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<h4 id="3-设置为可拖动的图形与tableview的滑动存在冲突"><a href="#3-设置为可拖动的图形与tableview的滑动存在冲突" class="headerlink" title="3. 设置为可拖动的图形与tableview的滑动存在冲突"></a>3. 设置为可拖动的图形与tableview的滑动存在冲突</h4><p>暂时的解决办法是在可拖动的图形顶部覆盖一层隐藏层，需要看全局数据的用户需要先进行一步点击才能进行图形的拖动操作。</p>
<h3 id="存在的不足"><a href="#存在的不足" class="headerlink" title="存在的不足"></a>存在的不足</h3><h4 id="1-组合图包含grouped柱状图时存在bug"><a href="#1-组合图包含grouped柱状图时存在bug" class="headerlink" title="1. 组合图包含grouped柱状图时存在bug"></a>1. 组合图包含grouped柱状图时存在bug</h4><p><img src="http://alithink.com/img/3bi/4.png" alt="problem.png"><br><img src="http://alithink.com/img/3bi/5.png" alt="solution.png"><br>尚未解决，暂时只能将grouped柱状图跟线形图分开成两个图进行展示。。。<br>或者研究下liuxuan30的这个PR<br><a href="https://github.com/danielgindi/Charts/issues/1159#issuecomment-228954675" target="_blank" rel="external">issue传送门</a></p>
<h4 id="2-堆积图缺失线性堆积图"><a href="#2-堆积图缺失线性堆积图" class="headerlink" title="2. 堆积图缺失线性堆积图"></a>2. 堆积图缺失线性堆积图</h4><p>目前只提供柱状堆积图的支持。</p>
<h4 id="3-ChartMarker堆积图功能缺失"><a href="#3-ChartMarker堆积图功能缺失" class="headerlink" title="3. ChartMarker堆积图功能缺失"></a>3. ChartMarker堆积图功能缺失</h4><p>堆积图的ChartMarker目前只能展示堆积后的总值，而不能展示分项的值。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>目前的这套方案可以满足基本的数据可视化需求，对于一些较为复杂灵活的图形展示需求，也可以封装一个单独的web类型的卡片，对于这部分需求采用web相关的图形可视化解决方案进行处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;BI中会涉及到不少图形可视化的应用，因为考虑到APP用户体验方面的需求（移动端版本主要面向集团领导使用），BI APP主要采用Native的
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>工作与生活的平衡</title>
    <link href="/2016/06/11/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB%E7%9A%84%E5%B9%B3%E8%A1%A1/"/>
    <id>/2016/06/11/工作与生活的平衡/</id>
    <published>2016-06-11T13:43:53.000Z</published>
    <updated>2016-06-11T14:30:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>对应视频的传送门：</p>
<p><a href="http://open.163.com/movie/2011/2/D/L/M77U1DAGR_M77U1L2DL.html" target="_blank" rel="external">如何实现工作与生活的平衡</a></p>
<h3 id="平衡的四个关键"><a href="#平衡的四个关键" class="headerlink" title="平衡的四个关键"></a>平衡的四个关键</h3><h4 id="1-有些职业的选择与生活具有不可调和性"><a href="#1-有些职业的选择与生活具有不可调和性" class="headerlink" title="1.有些职业的选择与生活具有不可调和性"></a>1.有些职业的选择与生活具有不可调和性</h4><p>这种不可调和跟周五允许不穿工装、育儿假等生活福利没有多大联系。很多人一直从事着自己痛恨着的工作，目的只是为了买一些没有多大用处的东西，以此博得自己的邻居朋友的羡慕而已。  </p>
<blockquote>
<p>职业的选择很重要，找到一份自己热爱并且可以驾驭掌控的工作是解决平衡问题的一个关键。</p>
</blockquote>
<h4 id="2-做平衡问题的掌舵者"><a href="#2-做平衡问题的掌舵者" class="headerlink" title="2.做平衡问题的掌舵者"></a>2.做平衡问题的掌舵者</h4><p>政府跟公司是无法帮你解决这个问题的，只能靠自己，自己不主动，最终的结果就不尽如意。所有商业公司其实本质上都是榨取你的价值以及尽可能的逃避责任，因此我们要尽可能的设定并加固自己生活中的各种界限，当工作的范畴越界时，主动的去解决与平衡。</p>
<blockquote>
<p>主动权在自己手中，理性的划分工作与生活的边界，才能为平衡提供依据。</p>
</blockquote>
<h4 id="3-合理控制理想平衡的时间周期"><a href="#3-合理控制理想平衡的时间周期" class="headerlink" title="3.合理控制理想平衡的时间周期"></a>3.合理控制理想平衡的时间周期</h4><p>这里慨叹下演讲者的身体素质（一天四次。。。），每个人对于理想中一天的定义不尽相同，但往往会发现其实这些想做的事情二十四小时的时间容量是不够的。有些人往往会想着等退休之后再好好享受生活，等孩子大了之后就可以有时间好好享受生活，其实这样就走入了另一个极端。一天太短，退休又太长，肯定会有折中的办法。</p>
<blockquote>
<p>有了好的规划，就要尽快实施，不要拖延，也不要安排的过于紧凑，制定一个合理的规划周期对于平衡来说也很重要。</p>
</blockquote>
<h4 id="4-平衡不只是工作之余健健身"><a href="#4-平衡不只是工作之余健健身" class="headerlink" title="4.平衡不只是工作之余健健身"></a>4.平衡不只是工作之余健健身</h4><p>很多人上班族，往往下班后以健身的方式来维持健康以及缓解压力，这本身是没问题的，但是只是健身其实还不够。很多人会说，我连健身的时间都没有，再让我去做其它事情就更不可能了。这里演讲者讲述了他与自己儿子的某一天的生活经历，大致是他提前下班去接儿子放学，然后带他在街边做了一些简单的户外游乐，然后带儿子去咖啡店吃了一些东西，最后回家给儿子洗澡给他讲故事陪他睡觉，等他吻过儿子的额头准备要离开儿子的房间时，儿子对他说：“爸爸，这是我过得最棒的一天”。</p>
<blockquote>
<p>小事并非无关紧要，在处理平衡问题时并不需要大张旗鼓的颠覆式的行动，也许多注意一些细节，多一些关心体贴与陪伴就够了。</p>
</blockquote>
<p>最后讲述者呼吁大家都能正确的处理平衡问题，这样也许会改变目前社会上单纯以个人财产衡量成功的观念。成功应该有一个更具平衡行和思想性的定义，即一个美好的生活的实现。</p>
<blockquote>
<p>共勉，为“美好生活“而努力。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对应视频的传送门：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://open.163.com/movie/2011/2/D/L/M77U1DAGR_M77U1L2DL.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何实现工作与生活的平衡&lt;/a&gt;&lt;
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>cocoapods私有仓库封装过程中的思考</title>
    <link href="/2016/06/04/cocoapods%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B0%81%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>/2016/06/04/cocoapods私有仓库封装过程中的思考/</id>
    <published>2016-06-04T13:33:11.000Z</published>
    <updated>2016-06-28T07:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>背景：随着公司相关APP项目的开展，公用框架的创建与维护越发显得迫切起来。因为工作中经常接触使用cocoapods,也知道她其实可以搞定这件事，所以就首当其冲的选择了基于cocoapods的封装方案。</p>
</blockquote>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><ul>
<li>给工作中封装的组件一个沉淀的地方。</li>
<li>为新项目的开展提供高效的支撑。</li>
<li>框架代码单独维护，功能点升级更新快捷。</li>
<li>一定程度督促自己代码的组织与优化。</li>
</ul>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>搭建的过程大致参考了这篇教程：<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="external">使用Cocoapods创建私有podspec</a><br>教程非常的细致，很赞的分享。其中有几个地方可能会有点疑惑：</p>
<h3 id="Podfile中specs引入方式"><a href="#Podfile中specs引入方式" class="headerlink" title="Podfile中specs引入方式"></a>Podfile中specs引入方式</h3><h4 id="1-path-gt-的引入方式"><a href="#1-path-gt-的引入方式" class="headerlink" title="1. :path =&gt;的引入方式"></a>1. :path =&gt;的引入方式</h4><ul>
<li>会添加到Development Pods中，并且复制整个私有库的文件组织结构（文件夹嵌套关系都会保留）,这种引入方式非常适合于私有库的开发阶段，因为这种方式引入的其实就是实际私有库的源文件，在demo项目中通过这种方式引入，充分测试私有库的相关功能会非常方便快捷。</li>
<li>对强迫症患者来说可能会觉得有点不完美的地方，就是当specs中包含subspecs的时候，用这种方式引入时，会出现一些多余的文件层次嵌套。。。感兴趣的患者们可以去试一下。。。</li>
</ul>
<h4 id="2-常规的引入方式"><a href="#2-常规的引入方式" class="headerlink" title="2. 常规的引入方式"></a>2. 常规的引入方式</h4><p>常规的引入方式这里就不多说了，它走的是另一个极端，会剔除库中的文件组织结构，而简单的划分了源文件与资源文件，如果包含subspecs，只保留子模块名一级的文件层次，模块内部的文件结构将不复存在，这里暂时没有找到合适的解决办法保留原有组织结构。</p>
<p><img src="http://alithink.com/img/2cocoapods/1.png" alt="1.png"></p>
<p>比如上图的结构，发布之后将改变为：</p>
<p><img src="http://alithink.com/img/2cocoapods/2.png" alt="2.png"></p>
<h3 id="子模块划分思路"><a href="#子模块划分思路" class="headerlink" title="子模块划分思路"></a>子模块划分思路</h3><p>先说结果，大致是按照这个思路进行划分的：  </p>
<h4 id="1-网络（剔除具体API调用部分）"><a href="#1-网络（剔除具体API调用部分）" class="headerlink" title="1. 网络（剔除具体API调用部分）"></a>1. 网络（剔除具体API调用部分）</h4><ul>
<li>添加样例</li>
<li>包含常用插件（network状态标识等）</li>
<li>缓存</li>
</ul>
<h4 id="2-模型映射"><a href="#2-模型映射" class="headerlink" title="2. 模型映射"></a>2. 模型映射</h4><ul>
<li>统一API调用规则</li>
<li>封装公共响应处理逻辑</li>
<li>对于错误类型的统一处理</li>
</ul>
<h4 id="3-Hybrid"><a href="#3-Hybrid" class="headerlink" title="3. Hybrid"></a>3. Hybrid</h4><ul>
<li>资源的预加载（js, css等）</li>
<li>native能力开放</li>
</ul>
<h4 id="4-UI"><a href="#4-UI" class="headerlink" title="4. UI"></a>4. UI</h4><ul>
<li>HUD</li>
<li>Tab</li>
<li>侧边栏</li>
<li>Nav常用操作</li>
<li>下拉上拉</li>
<li>Autolayout封装</li>
<li>datasource封装</li>
<li>常用动画转场</li>
</ul>
<h4 id="5-安全"><a href="#5-安全" class="headerlink" title="5. 安全"></a>5. 安全</h4><ul>
<li>加密解密</li>
</ul>
<h4 id="6-统计"><a href="#6-统计" class="headerlink" title="6. 统计"></a>6. 统计</h4><ul>
<li>swizzling添加打点入口</li>
<li>日志记录模块封装</li>
<li>bug收集分析</li>
</ul>
<h4 id="7-动态性"><a href="#7-动态性" class="headerlink" title="7. 动态性"></a>7. 动态性</h4><ul>
<li>热部署方案</li>
</ul>
<p>主要基于目前涉及项目主要关注的部分进行了一些拆解，每个模块直接可能存在依赖关系，这块cocoapods也贴心的帮忙搞定了，例如:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">s.subspec <span class="string">'APIModule'</span> <span class="keyword">do</span> <span class="params">|ss|</span></div><div class="line">    ss.source_files = <span class="string">'Classes/APIModule/**/*.&#123;swift,h,m&#125;'</span></div><div class="line">    ss.dependency <span class="string">'Moya'</span>, <span class="string">'~&gt; 6.5.0'</span></div><div class="line">    ss.dependency <span class="string">'HanekeSwift'</span>, <span class="string">'~&gt; 0.10.1'</span></div><div class="line">    ss.dependency <span class="string">'NetworkActivityIndicator'</span>, <span class="string">'~&gt; 0.1.6'</span></div><div class="line">    ss.dependency <span class="string">'MonkeyKit/UtilModule'</span></div><div class="line">    ss.dependency <span class="string">'MonkeyKit/ModelMapperModule'</span></div><div class="line">    ss.dependency <span class="string">'MonkeyKit/SecurityModule'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>框架会根据将来的实际使用情况再进行优化调整，逐渐完善起来。  </p>
<h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>本轮主要是基于基础功能模块的拆分封装，其实对于APP群常用的业务模块也可以做相同的工作，比如登录验证模块或者逻辑的封装等。通过对于公用业务场景的思考，逐渐提炼出可以产品化的地方，然后塞入公用库，将大大提升相关APP群的开发效率与产品质量。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;背景：随着公司相关APP项目的开展，公用框架的创建与维护越发显得迫切起来。因为工作中经常接触使用cocoapods,也知道她其实可以搞定这件事，所以就首当其冲的选择了基于cocoapods的封装方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>理性的你和猴子还有惊慌怪兽</title>
    <link href="/2016/05/24/%E7%90%86%E6%80%A7%E7%9A%84%E4%BD%A0%E5%92%8C%E7%8C%B4%E5%AD%90%E8%BF%98%E6%9C%89%E6%83%8A%E6%85%8C%E6%80%AA%E5%85%BD/"/>
    <id>/2016/05/24/理性的你和猴子还有惊慌怪兽/</id>
    <published>2016-05-24T13:50:25.000Z</published>
    <updated>2016-05-24T14:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>TED上面关于拖延症的两个视频很简短但确实分析的比较合理。  </p>
<h3 id="第一段讲述中主要点出了几个拖延期间的影响角色"><a href="#第一段讲述中主要点出了几个拖延期间的影响角色" class="headerlink" title="第一段讲述中主要点出了几个拖延期间的影响角色"></a>第一段讲述中主要点出了几个拖延期间的影响角色</h3><ol>
<li>理性的你：<br>初期愿景的发起者，确立的目标，并制定了简单的规划，促使目标完成的积极分子。</li>
<li>享乐的猴子：<br>用各种有意思的东西去吸引你，打断任务的执行，它出现的时候往往会感觉日子会过的很舒服，理性的你拿他没有办法，但它胆子小，最怕怪兽。</li>
<li>惊慌怪兽：<br>猴子的克星，只在有任务截止日期（Deadline）的任务最后一段时间出现，将猴子赶回树上，让理智的你重新掌握小船，奋力在截止日期前搞定这桩事情。</li>
</ol>
<p>从这里面可以看出来其实有惊慌怪兽的压制，往往猴子还是不敢太嚣张的，惊慌怪兽的出现时机也往往因人因任务量而异，但往往事情还是能够搞定的。<br>所以问题的关键就在于那些没有Deadline的任务！！！<br>那么问题解决的关键也就很清楚了，规划的时候要确立截止的时间，并最好让它不容易被轻易推翻，比如承诺给他人、公开发布自己的规划等等。 </p>
<h3 id="其实拖延也是有好处的"><a href="#其实拖延也是有好处的" class="headerlink" title="其实拖延也是有好处的"></a>其实拖延也是有好处的</h3><p>这是第二段讲述中主要阐述的东西<br>核心思想：立马开始并慢慢结束，让拖延的这段时间去发现重新认识目标任务本身，是很多创造者善于做的事情。<br>举了几个例子，比如贝多芬画蒙娜丽莎，画了好多年，中间研究了光学，反而促进了后期作品的创作。<br>还有就是以创业来说的话，其实不一定要做第一人，而要做创新者，因为基于已经有的事物的创新要容易的多，讲述着分享了一个调查，抢做第一人的失败率大概是48%，而创新改进的后起者的失败率则要低至8%。  </p>
<blockquote>
<p>博客写作也是拖延了好久了，今天开始一周至少一篇吧，周末就是Deadline ^_^ 共勉</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TED上面关于拖延症的两个视频很简短但确实分析的比较合理。  &lt;/p&gt;
&lt;h3 id=&quot;第一段讲述中主要点出了几个拖延期间的影响角色&quot;&gt;&lt;a href=&quot;#第一段讲述中主要点出了几个拖延期间的影响角色&quot; class=&quot;headerlink&quot; title=&quot;第一段讲述中主要点
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Swifter Tips阅读随想1</title>
    <link href="/2016/05/10/Swifter%20Tips%E9%98%85%E8%AF%BB%E9%9A%8F%E6%83%B31/"/>
    <id>/2016/05/10/Swifter Tips阅读随想1/</id>
    <published>2016-05-10T09:43:00.000Z</published>
    <updated>2016-05-10T09:56:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/1operator/1.png" alt=""></p>
<blockquote>
<p>这样可以很自然的想到<br>aaa ?? (a<em>b</em>c)<br>比<br>var default = a<em>b</em>c<br>aaa ?? default<br>性能上要优越，规避了一次计算，只有在真正需要的时候才会去计算默认值 </p>
</blockquote>
<p>在 Swift 中，其实 &amp;&amp; 和 || 这两个操作符里也用到了 @autoclosure。作为练习，不妨打开 Playground，试试看怎么实现这两个操作符<br><img src="/img/1operator/2.png" alt=""><br>按照这个思路，就可以轻松的定制操作符啦<br>比如这个&amp;&amp;的就这么简单<br>swift这个操作符只能接受bool类型<br>那么其实知道怎么实现的了就可以尝试给他扩展<br><img src="/img/1operator/3.png" alt=""><br>默认的是不支持的<br>这样这一块的知识点就通过一轮探索就都搞通了，还能加强记忆</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/1operator/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这样可以很自然的想到&lt;br&gt;aaa ?? (a&lt;em&gt;b&lt;/em&gt;c)&lt;br&gt;比&lt;br&gt;var default = a&lt;em&gt;b&lt;/em&gt;c&lt;br&gt;aaa
    
    </summary>
    
      <category term="Swift" scheme="/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>《三体》浅读梳理</title>
    <link href="/2015/06/06/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E6%B5%85%E8%AF%BB%E6%A2%B3%E7%90%86/"/>
    <id>/2015/06/06/《三体》浅读梳理/</id>
    <published>2015-06-06T06:45:34.000Z</published>
    <updated>2016-04-27T14:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>弱小和无知不是生存的障碍，傲慢才是</p>
</blockquote>
<hr>
<h3 id="三体中的经典宇宙观点："><a href="#三体中的经典宇宙观点：" class="headerlink" title="三体中的经典宇宙观点："></a>三体中的经典宇宙观点：</h3><ol>
<li>同纬度的黑暗森林法则</li>
<li>零光速（光幕 零维）黑洞的形成是因为曲率光速航迹所致</li>
<li>宇宙的低维化进程 塌缩为奇点 重归高维</li>
<li>物理法则不是恒定不变的，物理法则是可以当做武器的，常被利用的有光速与维度（二向箔）</li>
<li>可以向大宇宙索取质量形成小宇宙</li>
<li>各个宇宙其实是超模上的一个个泡</li>
</ol>
<h3 id="三体中感兴趣科技："><a href="#三体中感兴趣科技：" class="headerlink" title="三体中感兴趣科技："></a>三体中感兴趣科技：</h3><ol>
<li>冬眠技术，即使未来可能是毁灭</li>
<li>高度信息化，随处调取的全息信息窗体</li>
<li>光速飞船</li>
<li>与宇宙的无隔绝接触 人造地表大气压层</li>
<li>宇宙人造生态系统</li>
<li>智子</li>
<li>太空电梯</li>
<li>控制睡眠时间</li>
<li>高维碎片感受</li>
</ol>
<h3 id="印象深刻的角色："><a href="#印象深刻的角色：" class="headerlink" title="印象深刻的角色："></a>印象深刻的角色：</h3><ol>
<li>大史</li>
<li>逻辑</li>
<li>云天明</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;弱小和无知不是生存的障碍，傲慢才是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;三体中的经典宇宙观点：&quot;&gt;&lt;a href=&quot;#三体中的经典宇宙观点：&quot; class=&quot;headerlink&quot; title=&quot;三体中的经典宇宙观点：&quot;&gt;
    
    </summary>
    
      <category term="读过的书" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>IPA 企业证书重新签名</title>
    <link href="/2014/07/21/IPA%20%E4%BC%81%E4%B8%9A%E8%AF%81%E4%B9%A6%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D/"/>
    <id>/2014/07/21/IPA 企业证书重新签名/</id>
    <published>2014-07-21T09:33:40.000Z</published>
    <updated>2016-06-05T13:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>Step1 : 解压IPA</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip MYAPP.ipa</div></pre></td></tr></table></figure>
<ul>
<li>Step2: 删除旧的代码签名</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf Payload/ MYAPP.app/<span class="number">_</span>CodeSignature</div></pre></td></tr></table></figure>
<ul>
<li>Step3: 更换证书</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp MyEnterprise.mobileprovision Payload/ MYAPP.app/embedded.mobileprovision</div></pre></td></tr></table></figure>
<ul>
<li>Step4: 重签名</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/codesign -f -s <span class="string">"iPhone Distribution: YourCompanyName"</span> --resource-rules Payload/ MYAPP.app/ResourceRules.plist Payload/ MYAPP.app</div></pre></td></tr></table></figure>
<ul>
<li>Step 5: 重新打包，生成新的ipa</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zip -r New_ MYAPP.ipa Payload</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：<br>MYAPP.ipa: 要重签名的ipa</p>
<p>MyEnterprise.mobileprovision:要用来签名的provision文件</p>
<p>YourCompanyName:指该签名对应的证书的名字，这个可以在钥匙串中找到</p>
</blockquote>
<h4 id="在step4时有可能会报错：object-file-format-unrecognized-invalid-or-unsuitable-解决方法："><a href="#在step4时有可能会报错：object-file-format-unrecognized-invalid-or-unsuitable-解决方法：" class="headerlink" title="在step4时有可能会报错：object file format unrecognized, invalid, or unsuitable 解决方法："></a>在step4时有可能会报错：object file format unrecognized, invalid, or unsuitable 解决方法：</h4><ul>
<li>1）首先查看/usr/bin目录下是否存在codesign_allocate程序，如果存在，执行改名操作。 如果不存在，直接执行第二步</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv /usr/bin/codesign_allocate /usr/bin/codesign_allocate_old</div></pre></td></tr></table></figure>
<ul>
<li>2）将xcode目录下的codesign_allocate做一个软链接</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate /usr/bin</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Step1 : 解压IPA&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;ta
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
</feed>
