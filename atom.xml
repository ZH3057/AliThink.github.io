<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliThink&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.alithink.com/"/>
  <updated>2016-07-01T08:52:37.000Z</updated>
  <id>http://blog.alithink.com/</id>
  
  <author>
    <name>AliThink</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《禅与 Objective-C 编程艺术》读书杂记</title>
    <link href="http://blog.alithink.com/2016/07/01/%E3%80%8A%E7%A6%85%E4%B8%8E%20Objective-C%20%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%9D%82%E8%AE%B0/"/>
    <id>http://blog.alithink.com/2016/07/01/《禅与 Objective-C 编程艺术》读书杂记/</id>
    <published>2016-07-01T02:49:23.000Z</published>
    <updated>2016-07-01T08:52:37.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;纯粹拾遗性质的读书笔记，只记录知识体系尚模糊的内容&lt;br&gt;原文链接：&lt;a href=&quot;https://github.com/oa414/objc-zen-book-cn#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《禅与 Objective-C 编程艺术》&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-条件语句&quot;&gt;&lt;a href=&quot;#1-条件语句&quot; class=&quot;headerlink&quot; title=&quot;1.条件语句&quot;&gt;&lt;/a&gt;1.条件语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;善用return, 将主流程从分支中脱离&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-命名&quot;&gt;&lt;a href=&quot;#2-命名&quot; class=&quot;headerlink&quot; title=&quot;2.命名&quot;&gt;&lt;/a&gt;2.命名&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;常量 static NSString * const ZOCCacheNotification(尽量避免使用宏，除非真的需要用到她)&lt;/li&gt;
&lt;li&gt;with连接 取代and&lt;/li&gt;
&lt;li&gt;字面量&lt;ul&gt;
&lt;li&gt;不可变集合尽量使用字面量赋值&lt;/li&gt;
&lt;li&gt;可变集合避免[@[] mutableCopy]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-类&quot;&gt;&lt;a href=&quot;#3-类&quot; class=&quot;headerlink&quot; title=&quot;3.类&quot;&gt;&lt;/a&gt;3.类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类命名规范：ZOC(前缀)+Twitter(子类)+NetworkClient(父类)&lt;/li&gt;
&lt;li&gt;推荐代码组织顺序：&lt;ul&gt;
&lt;li&gt;dealloc(MRC)&lt;/li&gt;
&lt;li&gt;init&lt;ul&gt;
&lt;li&gt;designated initializer&lt;/li&gt;
&lt;li&gt;secondary initializer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;init的可失败性&lt;/li&gt;
&lt;li&gt;提供自己的初始化函数的三个步骤&lt;ul&gt;
&lt;li&gt;定义你的designated initializer, 确保调用了直接超类designated initializer&lt;/li&gt;
&lt;li&gt;重载直接超类的designated initializer。调用你的新的designated initializer&lt;/li&gt;
&lt;li&gt;为新的designated initializer写文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类簇：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单示例：&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation ZOCKintsugiPhotoViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)initWithPhotos:(NSArray *)photos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		if ([self isMemberOfClass:ZOCKintsugiPhotoViewController.class]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		self = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		if ([UIDevice isPad]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          		self = [[ZOCKintsugiPhotoViewController_iPad alloc] initWithPhotos:photos];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          		self = [[ZOCKintsugiPhotoViewController_iPhone alloc] initWithPhotos:photos];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      		return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  		return [super initWithNibName:nil bundle:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单例模式应该运用于类及类的接口趋向于作为单例来使用的情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;属性：&lt;ul&gt;
&lt;li&gt;NSString *text&lt;/li&gt;
&lt;li&gt;总应该使用getter和setter&lt;/li&gt;
&lt;li&gt;永远不要在init方法里面用getter和setter(dealloc中同样需要注意)&lt;/li&gt;
&lt;li&gt;使用点符号会让表达更加清晰并且帮助区分属性访问和方法调用&lt;/li&gt;
&lt;li&gt;属性定义推荐格式：@property (nonatomic, readwrite, copy) NSString *name;&lt;/li&gt;
&lt;li&gt;BOOL类型推荐格式：@property (assign, getter=isEditable) BOOL editable;&lt;/li&gt;
&lt;li&gt;通过readonly的属性暴露类内部可变属性的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相等性示例：&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)isEqual:(id)object &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	if (self == object) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     		return YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	if (![object isKindOfClass:[ZOCPerson class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     		return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	return [self isEqualToPerson:(ZOCPerson *)object];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)isEqualToPerson:(Person *)person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	if (!person) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	return NO;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	BOOL namesMatch = (!self.name &amp;amp;&amp;amp; !person.name) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                      [self.name isEqualToString:person.name];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	BOOL birthdaysMatch = (!self.birthday &amp;amp;&amp;amp; !person.birthday) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                          [self.birthday isEqualToDate:person.birthday];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		return haveEqualNames &amp;amp;&amp;amp; haveEqualBirthdays;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;4-Category&quot;&gt;&lt;a href=&quot;#4-Category&quot; class=&quot;headerlink&quot; title=&quot;4.Category&quot;&gt;&lt;/a&gt;4.Category&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;category方法前加上自己的小写前缀以及下划线，避免重名的category方法的覆盖不确定性&lt;/li&gt;
&lt;li&gt;利用category创建方法分组可以用来更好地进行不同功能的表示，并且把类打破在更多自我包含的组成部分里&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;5-Protocols&quot;&gt;&lt;a href=&quot;#5-Protocols&quot; class=&quot;headerlink&quot; title=&quot;5.Protocols&quot;&gt;&lt;/a&gt;5.Protocols&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当实现一个protocol你总应该坚持里氏替换原则。这个原则是：你应该可以取代任意接口实现，而不用改变客户端或者相关实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;6-NSNotification&quot;&gt;&lt;a href=&quot;#6-NSNotification&quot; class=&quot;headerlink&quot; title=&quot;6.NSNotification&quot;&gt;&lt;/a&gt;6.NSNotification&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通知名定义示例：extern NSString * const ZOCFooDidBecomeBarNotification;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;7-代码组织&quot;&gt;&lt;a href=&quot;#7-代码组织&quot; class=&quot;headerlink&quot; title=&quot;7.代码组织&quot;&gt;&lt;/a&gt;7.代码组织&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;清晰地组织代码和规范地进行定义，是你对自己以及其他阅读代码的人的尊重&lt;/li&gt;
&lt;li&gt;善用代码块({})&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pragma示例：&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)dealloc &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - View Lifecycle （View 的生命周期）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewDidLoad &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)viewWillAppear:(BOOL)animated &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)didReceiveMemoryWarning &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - Custom Accessors （自定义访问器）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setCustomProperty:(id)value &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (id)customProperty &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - IBActions  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (IBAction)submitData:(id)sender &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - Public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)publicMethod &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - Private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)zoc_privateMethod &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - UITableViewDataSource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - ZOCSuperclass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ... 重载来自 ZOCSuperclass 的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma mark - NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSString *)description &amp;#123; /* ... */ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;#pragma unused&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;#error #warning&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8-对象间的通讯&quot;&gt;&lt;a href=&quot;#8-对象间的通讯&quot; class=&quot;headerlink&quot; title=&quot;8.对象间的通讯&quot;&gt;&lt;/a&gt;8.对象间的通讯&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Block&lt;ul&gt;
&lt;li&gt;把需要提供的数据和错误信息整合到一个单独block中，比分别提供成功和失败的block要好&lt;ul&gt;
&lt;li&gt;若objects不为nil,则error必须为nil&lt;/li&gt;
&lt;li&gt;若objects为nil,则error必须不为nil&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三种方案的讨论（循环引用相关）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;委托和数据源&lt;ul&gt;
&lt;li&gt;委托模式：事件发生的时候，委托者需要通知代理者&lt;/li&gt;
&lt;li&gt;数据源模式：委托者需要从数据源对象拉去数据&lt;ul&gt;
&lt;li&gt;重载代理方法：instancesRespondToSelector&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9-面向切面编程&quot;&gt;&lt;a href=&quot;#9-面向切面编程&quot; class=&quot;headerlink&quot; title=&quot;9.面向切面编程&quot;&gt;&lt;/a&gt;9.面向切面编程&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;aspects&lt;/li&gt;
&lt;li&gt;应用举例 统计与日志：&lt;ul&gt;
&lt;li&gt;预先留一个统计的配置文件，记录需要统计的类、方法跟标签&lt;/li&gt;
&lt;li&gt;初始化时统一埋点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;纯粹拾遗性质的读书笔记，只记录知识体系尚模糊的内容&lt;br&gt;原文链接：&lt;a href=&quot;https://github.com/oa414/objc-zen-book-cn#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7
    
    </summary>
    
      <category term="读过的书" scheme="http://blog.alithink.com/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>BI APP图形库选型</title>
    <link href="http://blog.alithink.com/2016/06/28/BI%20APP%E5%9B%BE%E5%BD%A2%E5%BA%93%E9%80%89%E5%9E%8B/"/>
    <id>http://blog.alithink.com/2016/06/28/BI APP图形库选型/</id>
    <published>2016-06-28T01:55:04.000Z</published>
    <updated>2016-06-28T07:09:34.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;BI中会涉及到不少图形可视化的应用，因为考虑到APP用户体验方面的需求（移动端版本主要面向集团领导使用），BI APP主要采用Native的图形可视化解决方案（当然Swift优先^_^）。&lt;/p&gt;
&lt;h3 id=&quot;涉及的图形类型&quot;&gt;&lt;a href=&quot;#涉及的图形类型&quot; class=&quot;headerlink&quot; title=&quot;涉及的图形类型&quot;&gt;&lt;/a&gt;涉及的图形类型&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://alithink.com/img/3bi/1.png&quot; alt=&quot;BI show.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;BI 中的各种图形图表都封装成了对应的卡片类型，根据接口的卡片类型描述动态生成对应的数据卡片进行展示。&lt;/p&gt;
&lt;h3 id=&quot;开源库选型&quot;&gt;&lt;a href=&quot;#开源库选型&quot; class=&quot;headerlink&quot; title=&quot;开源库选型&quot;&gt;&lt;/a&gt;开源库选型&lt;/h3&gt;&lt;h4 id=&quot;1-Charts&quot;&gt;&lt;a href=&quot;#1-Charts&quot; class=&quot;headerlink&quot; title=&quot;1.Charts&quot;&gt;&lt;/a&gt;1.Charts&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://github.com/danielgindi/Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/danielgindi/Charts&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;应用场景：&quot;&gt;&lt;a href=&quot;#应用场景：&quot; class=&quot;headerlink&quot; title=&quot;应用场景：&quot;&gt;&lt;/a&gt;应用场景：&lt;/h5&gt;&lt;p&gt;主力图形库，常规图形的展示。&lt;/p&gt;
&lt;h5 id=&quot;优势：&quot;&gt;&lt;a href=&quot;#优势：&quot; class=&quot;headerlink&quot; title=&quot;优势：&quot;&gt;&lt;/a&gt;优势：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;图形类型支持覆盖率较高，基本涵盖了所有常用的图形类型（组合图待完善中…）。&lt;/li&gt;
&lt;li&gt;文档较完备，且iOS、Android平台接口一致，迁移成本低&lt;/li&gt;
&lt;li&gt;图形库热度高，持续更新中。&lt;/li&gt;
&lt;li&gt;较为优雅的动画支持、默认数据展示区域的控制、各种展示细节的灵活控制等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-ESArcProgressView&quot;&gt;&lt;a href=&quot;#2-ESArcProgressView&quot; class=&quot;headerlink&quot; title=&quot;2.ESArcProgressView&quot;&gt;&lt;/a&gt;2.ESArcProgressView&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://github.com/e-sites/ESArcProgressView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/e-sites/ESArcProgressView&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;应用场景：-1&quot;&gt;&lt;a href=&quot;#应用场景：-1&quot; class=&quot;headerlink&quot; title=&quot;应用场景：&quot;&gt;&lt;/a&gt;应用场景：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://alithink.com/img/3bi/2.png&quot; alt=&quot;Circle.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;多层环形图（暂时这么称呼她吧）&lt;br&gt;其实是仿照的Apple Watch的Activity，不过确实比纯粹的柱状图更具美感一些^_^。&lt;/p&gt;
&lt;h5 id=&quot;优势：-1&quot;&gt;&lt;a href=&quot;#优势：-1&quot; class=&quot;headerlink&quot; title=&quot;优势：&quot;&gt;&lt;/a&gt;优势：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;其它的类似轮子还真没找到。。。&lt;/li&gt;
&lt;li&gt;支持简单动画，不过需要手动处理下timer的runloop mode的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-XCL-Charts&quot;&gt;&lt;a href=&quot;#3-XCL-Charts&quot; class=&quot;headerlink&quot; title=&quot;3.XCL-Charts&quot;&gt;&lt;/a&gt;3.XCL-Charts&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://github.com/xcltapestry/XCL-Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xcltapestry/XCL-Charts&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;应用场景：-2&quot;&gt;&lt;a href=&quot;#应用场景：-2&quot; class=&quot;headerlink&quot; title=&quot;应用场景：&quot;&gt;&lt;/a&gt;应用场景：&lt;/h5&gt;&lt;p&gt;&lt;img src=&quot;http://alithink.com/img/3bi/3.png&quot; alt=&quot;android circle.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android的多层环形图解决方案，XCL也是一个较为完备的Android图形库，不过相较来说库的成熟度没有Charts高，一些细节功能也存在一定程度的缺失。&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;这里主要就Charts的问题解决方案进行一些分享：&lt;/p&gt;
&lt;h4 id=&quot;1-展示图形中的最后几个元素&quot;&gt;&lt;a href=&quot;#1-展示图形中的最后几个元素&quot; class=&quot;headerlink&quot; title=&quot;1. 展示图形中的最后几个元素&quot;&gt;&lt;/a&gt;1. 展示图形中的最后几个元素&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//显示可视区域的元素个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chartView?.setVisibleXRangeMaximum(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * moveViewToX存在bug无法正确切换位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 调用此方法的前提条件是需要预先提供一个确定的frame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * xIndex为显示到的x元素的序列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chartView?.moveViewToAnimated(xIndex: &lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt;(xVals.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), yValue: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, axis: &lt;span class=&quot;type&quot;&gt;ChartYAxis&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;AxisDependency&lt;/span&gt;.&lt;span class=&quot;type&quot;&gt;Left&lt;/span&gt;, duration: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里setVisibleXRangeMaximum设置的数目在grouped柱状图配置的时候记得要乘以单位组内柱子的数目并包含组之间间隔的空间（往往间隔的空间也算做一个柱子）。&lt;/p&gt;
&lt;h4 id=&quot;2-完整显示x轴所有的元素标签&quot;&gt;&lt;a href=&quot;#2-完整显示x轴所有的元素标签&quot; class=&quot;headerlink&quot; title=&quot;2. 完整显示x轴所有的元素标签&quot;&gt;&lt;/a&gt;2. 完整显示x轴所有的元素标签&lt;/h4&gt;&lt;p&gt;Charts默认自动计算相邻x轴元素标签的距离, 控制x轴部分标签的隐藏以达到较好的现实效果。但实际需求中往往会要求展示所有x轴的元素标签，那么就可以通过以下配置禁用默认的计算。&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xAxis?.setLabelsToSkip(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-设置为可拖动的图形与tableview的滑动存在冲突&quot;&gt;&lt;a href=&quot;#3-设置为可拖动的图形与tableview的滑动存在冲突&quot; class=&quot;headerlink&quot; title=&quot;3. 设置为可拖动的图形与tableview的滑动存在冲突&quot;&gt;&lt;/a&gt;3. 设置为可拖动的图形与tableview的滑动存在冲突&lt;/h4&gt;&lt;p&gt;暂时的解决办法是在可拖动的图形顶部覆盖一层隐藏层，需要看全局数据的用户需要先进行一步点击才能进行图形的拖动操作。&lt;/p&gt;
&lt;h3 id=&quot;存在的不足&quot;&gt;&lt;a href=&quot;#存在的不足&quot; class=&quot;headerlink&quot; title=&quot;存在的不足&quot;&gt;&lt;/a&gt;存在的不足&lt;/h3&gt;&lt;h4 id=&quot;1-组合图包含grouped柱状图时存在bug&quot;&gt;&lt;a href=&quot;#1-组合图包含grouped柱状图时存在bug&quot; class=&quot;headerlink&quot; title=&quot;1. 组合图包含grouped柱状图时存在bug&quot;&gt;&lt;/a&gt;1. 组合图包含grouped柱状图时存在bug&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://alithink.com/img/3bi/4.png&quot; alt=&quot;problem.png&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://alithink.com/img/3bi/5.png&quot; alt=&quot;solution.png&quot;&gt;&lt;br&gt;尚未解决，暂时只能将grouped柱状图跟线形图分开成两个图进行展示。。。&lt;br&gt;或者研究下liuxuan30的这个PR&lt;br&gt;&lt;a href=&quot;https://github.com/danielgindi/Charts/issues/1159#issuecomment-228954675&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue传送门&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-堆积图缺失线性堆积图&quot;&gt;&lt;a href=&quot;#2-堆积图缺失线性堆积图&quot; class=&quot;headerlink&quot; title=&quot;2. 堆积图缺失线性堆积图&quot;&gt;&lt;/a&gt;2. 堆积图缺失线性堆积图&lt;/h4&gt;&lt;p&gt;目前只提供柱状堆积图的支持。&lt;/p&gt;
&lt;h4 id=&quot;3-ChartMarker堆积图功能缺失&quot;&gt;&lt;a href=&quot;#3-ChartMarker堆积图功能缺失&quot; class=&quot;headerlink&quot; title=&quot;3. ChartMarker堆积图功能缺失&quot;&gt;&lt;/a&gt;3. ChartMarker堆积图功能缺失&lt;/h4&gt;&lt;p&gt;堆积图的ChartMarker目前只能展示堆积后的总值，而不能展示分项的值。&lt;/p&gt;
&lt;h3 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h3&gt;&lt;p&gt;目前的这套方案可以满足基本的数据可视化需求，对于一些较为复杂灵活的图形展示需求，也可以封装一个单独的web类型的卡片，对于这部分需求采用web相关的图形可视化解决方案进行处理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;BI中会涉及到不少图形可视化的应用，因为考虑到APP用户体验方面的需求（移动端版本主要面向集团领导使用），BI APP主要采用Native的
    
    </summary>
    
      <category term="iOS" scheme="http://blog.alithink.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>工作与生活的平衡</title>
    <link href="http://blog.alithink.com/2016/06/11/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB%E7%9A%84%E5%B9%B3%E8%A1%A1/"/>
    <id>http://blog.alithink.com/2016/06/11/工作与生活的平衡/</id>
    <published>2016-06-11T13:43:53.000Z</published>
    <updated>2016-06-11T14:30:11.000Z</updated>
    
    <content type="html">&lt;p&gt;对应视频的传送门：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://open.163.com/movie/2011/2/D/L/M77U1DAGR_M77U1L2DL.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何实现工作与生活的平衡&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;平衡的四个关键&quot;&gt;&lt;a href=&quot;#平衡的四个关键&quot; class=&quot;headerlink&quot; title=&quot;平衡的四个关键&quot;&gt;&lt;/a&gt;平衡的四个关键&lt;/h3&gt;&lt;h4 id=&quot;1-有些职业的选择与生活具有不可调和性&quot;&gt;&lt;a href=&quot;#1-有些职业的选择与生活具有不可调和性&quot; class=&quot;headerlink&quot; title=&quot;1.有些职业的选择与生活具有不可调和性&quot;&gt;&lt;/a&gt;1.有些职业的选择与生活具有不可调和性&lt;/h4&gt;&lt;p&gt;这种不可调和跟周五允许不穿工装、育儿假等生活福利没有多大联系。很多人一直从事着自己痛恨着的工作，目的只是为了买一些没有多大用处的东西，以此博得自己的邻居朋友的羡慕而已。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;职业的选择很重要，找到一份自己热爱并且可以驾驭掌控的工作是解决平衡问题的一个关键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;2-做平衡问题的掌舵者&quot;&gt;&lt;a href=&quot;#2-做平衡问题的掌舵者&quot; class=&quot;headerlink&quot; title=&quot;2.做平衡问题的掌舵者&quot;&gt;&lt;/a&gt;2.做平衡问题的掌舵者&lt;/h4&gt;&lt;p&gt;政府跟公司是无法帮你解决这个问题的，只能靠自己，自己不主动，最终的结果就不尽如意。所有商业公司其实本质上都是榨取你的价值以及尽可能的逃避责任，因此我们要尽可能的设定并加固自己生活中的各种界限，当工作的范畴越界时，主动的去解决与平衡。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主动权在自己手中，理性的划分工作与生活的边界，才能为平衡提供依据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;3-合理控制理想平衡的时间周期&quot;&gt;&lt;a href=&quot;#3-合理控制理想平衡的时间周期&quot; class=&quot;headerlink&quot; title=&quot;3.合理控制理想平衡的时间周期&quot;&gt;&lt;/a&gt;3.合理控制理想平衡的时间周期&lt;/h4&gt;&lt;p&gt;这里慨叹下演讲者的身体素质（一天四次。。。），每个人对于理想中一天的定义不尽相同，但往往会发现其实这些想做的事情二十四小时的时间容量是不够的。有些人往往会想着等退休之后再好好享受生活，等孩子大了之后就可以有时间好好享受生活，其实这样就走入了另一个极端。一天太短，退休又太长，肯定会有折中的办法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有了好的规划，就要尽快实施，不要拖延，也不要安排的过于紧凑，制定一个合理的规划周期对于平衡来说也很重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;4-平衡不只是工作之余健健身&quot;&gt;&lt;a href=&quot;#4-平衡不只是工作之余健健身&quot; class=&quot;headerlink&quot; title=&quot;4.平衡不只是工作之余健健身&quot;&gt;&lt;/a&gt;4.平衡不只是工作之余健健身&lt;/h4&gt;&lt;p&gt;很多人上班族，往往下班后以健身的方式来维持健康以及缓解压力，这本身是没问题的，但是只是健身其实还不够。很多人会说，我连健身的时间都没有，再让我去做其它事情就更不可能了。这里演讲者讲述了他与自己儿子的某一天的生活经历，大致是他提前下班去接儿子放学，然后带他在街边做了一些简单的户外游乐，然后带儿子去咖啡店吃了一些东西，最后回家给儿子洗澡给他讲故事陪他睡觉，等他吻过儿子的额头准备要离开儿子的房间时，儿子对他说：“爸爸，这是我过得最棒的一天”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小事并非无关紧要，在处理平衡问题时并不需要大张旗鼓的颠覆式的行动，也许多注意一些细节，多一些关心体贴与陪伴就够了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后讲述者呼吁大家都能正确的处理平衡问题，这样也许会改变目前社会上单纯以个人财产衡量成功的观念。成功应该有一个更具平衡行和思想性的定义，即一个美好的生活的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;共勉，为“美好生活“而努力。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对应视频的传送门：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://open.163.com/movie/2011/2/D/L/M77U1DAGR_M77U1L2DL.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何实现工作与生活的平衡&lt;/a&gt;&lt;
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="http://blog.alithink.com/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>cocoapods私有仓库封装过程中的思考</title>
    <link href="http://blog.alithink.com/2016/06/04/cocoapods%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B0%81%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://blog.alithink.com/2016/06/04/cocoapods私有仓库封装过程中的思考/</id>
    <published>2016-06-04T13:33:11.000Z</published>
    <updated>2016-06-28T07:11:28.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;背景：随着公司相关APP项目的开展，公用框架的创建与维护越发显得迫切起来。因为工作中经常接触使用cocoapods,也知道她其实可以搞定这件事，所以就首当其冲的选择了基于cocoapods的封装方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;给工作中封装的组件一个沉淀的地方。&lt;/li&gt;
&lt;li&gt;为新项目的开展提供高效的支撑。&lt;/li&gt;
&lt;li&gt;框架代码单独维护，功能点升级更新快捷。&lt;/li&gt;
&lt;li&gt;一定程度督促自己代码的组织与优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;知识储备&quot;&gt;&lt;a href=&quot;#知识储备&quot; class=&quot;headerlink&quot; title=&quot;知识储备&quot;&gt;&lt;/a&gt;知识储备&lt;/h2&gt;&lt;p&gt;搭建的过程大致参考了这篇教程：&lt;a href=&quot;http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Cocoapods创建私有podspec&lt;/a&gt;&lt;br&gt;教程非常的细致，很赞的分享。其中有几个地方可能会有点疑惑：&lt;/p&gt;
&lt;h3 id=&quot;Podfile中specs引入方式&quot;&gt;&lt;a href=&quot;#Podfile中specs引入方式&quot; class=&quot;headerlink&quot; title=&quot;Podfile中specs引入方式&quot;&gt;&lt;/a&gt;Podfile中specs引入方式&lt;/h3&gt;&lt;h4 id=&quot;1-path-gt-的引入方式&quot;&gt;&lt;a href=&quot;#1-path-gt-的引入方式&quot; class=&quot;headerlink&quot; title=&quot;1. :path =&amp;gt;的引入方式&quot;&gt;&lt;/a&gt;1. :path =&amp;gt;的引入方式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;会添加到Development Pods中，并且复制整个私有库的文件组织结构（文件夹嵌套关系都会保留）,这种引入方式非常适合于私有库的开发阶段，因为这种方式引入的其实就是实际私有库的源文件，在demo项目中通过这种方式引入，充分测试私有库的相关功能会非常方便快捷。&lt;/li&gt;
&lt;li&gt;对强迫症患者来说可能会觉得有点不完美的地方，就是当specs中包含subspecs的时候，用这种方式引入时，会出现一些多余的文件层次嵌套。。。感兴趣的患者们可以去试一下。。。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-常规的引入方式&quot;&gt;&lt;a href=&quot;#2-常规的引入方式&quot; class=&quot;headerlink&quot; title=&quot;2. 常规的引入方式&quot;&gt;&lt;/a&gt;2. 常规的引入方式&lt;/h4&gt;&lt;p&gt;常规的引入方式这里就不多说了，它走的是另一个极端，会剔除库中的文件组织结构，而简单的划分了源文件与资源文件，如果包含subspecs，只保留子模块名一级的文件层次，模块内部的文件结构将不复存在，这里暂时没有找到合适的解决办法保留原有组织结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://alithink.com/img/2cocoapods/1.png&quot; alt=&quot;1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如上图的结构，发布之后将改变为：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://alithink.com/img/2cocoapods/2.png&quot; alt=&quot;2.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;子模块划分思路&quot;&gt;&lt;a href=&quot;#子模块划分思路&quot; class=&quot;headerlink&quot; title=&quot;子模块划分思路&quot;&gt;&lt;/a&gt;子模块划分思路&lt;/h3&gt;&lt;p&gt;先说结果，大致是按照这个思路进行划分的：  &lt;/p&gt;
&lt;h4 id=&quot;1-网络（剔除具体API调用部分）&quot;&gt;&lt;a href=&quot;#1-网络（剔除具体API调用部分）&quot; class=&quot;headerlink&quot; title=&quot;1. 网络（剔除具体API调用部分）&quot;&gt;&lt;/a&gt;1. 网络（剔除具体API调用部分）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;添加样例&lt;/li&gt;
&lt;li&gt;包含常用插件（network状态标识等）&lt;/li&gt;
&lt;li&gt;缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-模型映射&quot;&gt;&lt;a href=&quot;#2-模型映射&quot; class=&quot;headerlink&quot; title=&quot;2. 模型映射&quot;&gt;&lt;/a&gt;2. 模型映射&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;统一API调用规则&lt;/li&gt;
&lt;li&gt;封装公共响应处理逻辑&lt;/li&gt;
&lt;li&gt;对于错误类型的统一处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-Hybrid&quot;&gt;&lt;a href=&quot;#3-Hybrid&quot; class=&quot;headerlink&quot; title=&quot;3. Hybrid&quot;&gt;&lt;/a&gt;3. Hybrid&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;资源的预加载（js, css等）&lt;/li&gt;
&lt;li&gt;native能力开放&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-UI&quot;&gt;&lt;a href=&quot;#4-UI&quot; class=&quot;headerlink&quot; title=&quot;4. UI&quot;&gt;&lt;/a&gt;4. UI&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;HUD&lt;/li&gt;
&lt;li&gt;Tab&lt;/li&gt;
&lt;li&gt;侧边栏&lt;/li&gt;
&lt;li&gt;Nav常用操作&lt;/li&gt;
&lt;li&gt;下拉上拉&lt;/li&gt;
&lt;li&gt;Autolayout封装&lt;/li&gt;
&lt;li&gt;datasource封装&lt;/li&gt;
&lt;li&gt;常用动画转场&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5-安全&quot;&gt;&lt;a href=&quot;#5-安全&quot; class=&quot;headerlink&quot; title=&quot;5. 安全&quot;&gt;&lt;/a&gt;5. 安全&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;加密解密&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;6-统计&quot;&gt;&lt;a href=&quot;#6-统计&quot; class=&quot;headerlink&quot; title=&quot;6. 统计&quot;&gt;&lt;/a&gt;6. 统计&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;swizzling添加打点入口&lt;/li&gt;
&lt;li&gt;日志记录模块封装&lt;/li&gt;
&lt;li&gt;bug收集分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;7-动态性&quot;&gt;&lt;a href=&quot;#7-动态性&quot; class=&quot;headerlink&quot; title=&quot;7. 动态性&quot;&gt;&lt;/a&gt;7. 动态性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;热部署方案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要基于目前涉及项目主要关注的部分进行了一些拆解，每个模块直接可能存在依赖关系，这块cocoapods也贴心的帮忙搞定了，例如:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;s.subspec &lt;span class=&quot;string&quot;&gt;&#39;APIModule&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|ss|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.source_files = &lt;span class=&quot;string&quot;&gt;&#39;Classes/APIModule/**/*.&amp;#123;swift,h,m&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.dependency &lt;span class=&quot;string&quot;&gt;&#39;Moya&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 6.5.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.dependency &lt;span class=&quot;string&quot;&gt;&#39;HanekeSwift&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 0.10.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.dependency &lt;span class=&quot;string&quot;&gt;&#39;NetworkActivityIndicator&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 0.1.6&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.dependency &lt;span class=&quot;string&quot;&gt;&#39;MonkeyKit/UtilModule&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.dependency &lt;span class=&quot;string&quot;&gt;&#39;MonkeyKit/ModelMapperModule&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ss.dependency &lt;span class=&quot;string&quot;&gt;&#39;MonkeyKit/SecurityModule&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;框架会根据将来的实际使用情况再进行优化调整，逐渐完善起来。  &lt;/p&gt;
&lt;h3 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h3&gt;&lt;p&gt;本轮主要是基于基础功能模块的拆分封装，其实对于APP群常用的业务模块也可以做相同的工作，比如登录验证模块或者逻辑的封装等。通过对于公用业务场景的思考，逐渐提炼出可以产品化的地方，然后塞入公用库，将大大提升相关APP群的开发效率与产品质量。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;背景：随着公司相关APP项目的开展，公用框架的创建与维护越发显得迫切起来。因为工作中经常接触使用cocoapods,也知道她其实可以搞定这件事，所以就首当其冲的选择了基于cocoapods的封装方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 i
    
    </summary>
    
      <category term="iOS" scheme="http://blog.alithink.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>理性的你和猴子还有惊慌怪兽</title>
    <link href="http://blog.alithink.com/2016/05/24/%E7%90%86%E6%80%A7%E7%9A%84%E4%BD%A0%E5%92%8C%E7%8C%B4%E5%AD%90%E8%BF%98%E6%9C%89%E6%83%8A%E6%85%8C%E6%80%AA%E5%85%BD/"/>
    <id>http://blog.alithink.com/2016/05/24/理性的你和猴子还有惊慌怪兽/</id>
    <published>2016-05-24T13:50:25.000Z</published>
    <updated>2016-05-24T14:21:17.000Z</updated>
    
    <content type="html">&lt;p&gt;TED上面关于拖延症的两个视频很简短但确实分析的比较合理。  &lt;/p&gt;
&lt;h3 id=&quot;第一段讲述中主要点出了几个拖延期间的影响角色&quot;&gt;&lt;a href=&quot;#第一段讲述中主要点出了几个拖延期间的影响角色&quot; class=&quot;headerlink&quot; title=&quot;第一段讲述中主要点出了几个拖延期间的影响角色&quot;&gt;&lt;/a&gt;第一段讲述中主要点出了几个拖延期间的影响角色&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;理性的你：&lt;br&gt;初期愿景的发起者，确立的目标，并制定了简单的规划，促使目标完成的积极分子。&lt;/li&gt;
&lt;li&gt;享乐的猴子：&lt;br&gt;用各种有意思的东西去吸引你，打断任务的执行，它出现的时候往往会感觉日子会过的很舒服，理性的你拿他没有办法，但它胆子小，最怕怪兽。&lt;/li&gt;
&lt;li&gt;惊慌怪兽：&lt;br&gt;猴子的克星，只在有任务截止日期（Deadline）的任务最后一段时间出现，将猴子赶回树上，让理智的你重新掌握小船，奋力在截止日期前搞定这桩事情。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从这里面可以看出来其实有惊慌怪兽的压制，往往猴子还是不敢太嚣张的，惊慌怪兽的出现时机也往往因人因任务量而异，但往往事情还是能够搞定的。&lt;br&gt;所以问题的关键就在于那些没有Deadline的任务！！！&lt;br&gt;那么问题解决的关键也就很清楚了，规划的时候要确立截止的时间，并最好让它不容易被轻易推翻，比如承诺给他人、公开发布自己的规划等等。 &lt;/p&gt;
&lt;h3 id=&quot;其实拖延也是有好处的&quot;&gt;&lt;a href=&quot;#其实拖延也是有好处的&quot; class=&quot;headerlink&quot; title=&quot;其实拖延也是有好处的&quot;&gt;&lt;/a&gt;其实拖延也是有好处的&lt;/h3&gt;&lt;p&gt;这是第二段讲述中主要阐述的东西&lt;br&gt;核心思想：立马开始并慢慢结束，让拖延的这段时间去发现重新认识目标任务本身，是很多创造者善于做的事情。&lt;br&gt;举了几个例子，比如贝多芬画蒙娜丽莎，画了好多年，中间研究了光学，反而促进了后期作品的创作。&lt;br&gt;还有就是以创业来说的话，其实不一定要做第一人，而要做创新者，因为基于已经有的事物的创新要容易的多，讲述着分享了一个调查，抢做第一人的失败率大概是48%，而创新改进的后起者的失败率则要低至8%。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;博客写作也是拖延了好久了，今天开始一周至少一篇吧，周末就是Deadline ^_^ 共勉&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;TED上面关于拖延症的两个视频很简短但确实分析的比较合理。  &lt;/p&gt;
&lt;h3 id=&quot;第一段讲述中主要点出了几个拖延期间的影响角色&quot;&gt;&lt;a href=&quot;#第一段讲述中主要点出了几个拖延期间的影响角色&quot; class=&quot;headerlink&quot; title=&quot;第一段讲述中主要点
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="http://blog.alithink.com/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Swifter Tips阅读随想1</title>
    <link href="http://blog.alithink.com/2016/05/10/Swifter%20Tips%E9%98%85%E8%AF%BB%E9%9A%8F%E6%83%B31/"/>
    <id>http://blog.alithink.com/2016/05/10/Swifter Tips阅读随想1/</id>
    <published>2016-05-10T09:43:00.000Z</published>
    <updated>2016-05-10T09:56:41.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/1operator/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这样可以很自然的想到&lt;br&gt;aaa ?? (a&lt;em&gt;b&lt;/em&gt;c)&lt;br&gt;比&lt;br&gt;var default = a&lt;em&gt;b&lt;/em&gt;c&lt;br&gt;aaa ?? default&lt;br&gt;性能上要优越，规避了一次计算，只有在真正需要的时候才会去计算默认值 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Swift 中，其实 &amp;amp;&amp;amp; 和 || 这两个操作符里也用到了 @autoclosure。作为练习，不妨打开 Playground，试试看怎么实现这两个操作符&lt;br&gt;&lt;img src=&quot;/img/1operator/2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;按照这个思路，就可以轻松的定制操作符啦&lt;br&gt;比如这个&amp;amp;&amp;amp;的就这么简单&lt;br&gt;swift这个操作符只能接受bool类型&lt;br&gt;那么其实知道怎么实现的了就可以尝试给他扩展&lt;br&gt;&lt;img src=&quot;/img/1operator/3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;默认的是不支持的&lt;br&gt;这样这一块的知识点就通过一轮探索就都搞通了，还能加强记忆&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/1operator/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这样可以很自然的想到&lt;br&gt;aaa ?? (a&lt;em&gt;b&lt;/em&gt;c)&lt;br&gt;比&lt;br&gt;var default = a&lt;em&gt;b&lt;/em&gt;c&lt;br&gt;aaa
    
    </summary>
    
      <category term="Swift" scheme="http://blog.alithink.com/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>《三体》浅读梳理</title>
    <link href="http://blog.alithink.com/2015/06/06/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E6%B5%85%E8%AF%BB%E6%A2%B3%E7%90%86/"/>
    <id>http://blog.alithink.com/2015/06/06/《三体》浅读梳理/</id>
    <published>2015-06-06T06:45:34.000Z</published>
    <updated>2016-04-27T14:00:12.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;弱小和无知不是生存的障碍，傲慢才是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;三体中的经典宇宙观点：&quot;&gt;&lt;a href=&quot;#三体中的经典宇宙观点：&quot; class=&quot;headerlink&quot; title=&quot;三体中的经典宇宙观点：&quot;&gt;&lt;/a&gt;三体中的经典宇宙观点：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;同纬度的黑暗森林法则&lt;/li&gt;
&lt;li&gt;零光速（光幕 零维）黑洞的形成是因为曲率光速航迹所致&lt;/li&gt;
&lt;li&gt;宇宙的低维化进程 塌缩为奇点 重归高维&lt;/li&gt;
&lt;li&gt;物理法则不是恒定不变的，物理法则是可以当做武器的，常被利用的有光速与维度（二向箔）&lt;/li&gt;
&lt;li&gt;可以向大宇宙索取质量形成小宇宙&lt;/li&gt;
&lt;li&gt;各个宇宙其实是超模上的一个个泡&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;三体中感兴趣科技：&quot;&gt;&lt;a href=&quot;#三体中感兴趣科技：&quot; class=&quot;headerlink&quot; title=&quot;三体中感兴趣科技：&quot;&gt;&lt;/a&gt;三体中感兴趣科技：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;冬眠技术，即使未来可能是毁灭&lt;/li&gt;
&lt;li&gt;高度信息化，随处调取的全息信息窗体&lt;/li&gt;
&lt;li&gt;光速飞船&lt;/li&gt;
&lt;li&gt;与宇宙的无隔绝接触 人造地表大气压层&lt;/li&gt;
&lt;li&gt;宇宙人造生态系统&lt;/li&gt;
&lt;li&gt;智子&lt;/li&gt;
&lt;li&gt;太空电梯&lt;/li&gt;
&lt;li&gt;控制睡眠时间&lt;/li&gt;
&lt;li&gt;高维碎片感受&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;印象深刻的角色：&quot;&gt;&lt;a href=&quot;#印象深刻的角色：&quot; class=&quot;headerlink&quot; title=&quot;印象深刻的角色：&quot;&gt;&lt;/a&gt;印象深刻的角色：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;大史&lt;/li&gt;
&lt;li&gt;逻辑&lt;/li&gt;
&lt;li&gt;云天明&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;弱小和无知不是生存的障碍，傲慢才是&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;三体中的经典宇宙观点：&quot;&gt;&lt;a href=&quot;#三体中的经典宇宙观点：&quot; class=&quot;headerlink&quot; title=&quot;三体中的经典宇宙观点：&quot;&gt;
    
    </summary>
    
      <category term="读过的书" scheme="http://blog.alithink.com/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>IPA 企业证书重新签名</title>
    <link href="http://blog.alithink.com/2014/07/21/IPA%20%E4%BC%81%E4%B8%9A%E8%AF%81%E4%B9%A6%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D/"/>
    <id>http://blog.alithink.com/2014/07/21/IPA 企业证书重新签名/</id>
    <published>2014-07-21T09:33:40.000Z</published>
    <updated>2016-06-05T13:32:34.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Step1 : 解压IPA&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unzip MYAPP.ipa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Step2: 删除旧的代码签名&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rm -rf Payload/ MYAPP.app/_CodeSignature&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Step3: 更换证书&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp MyEnterprise.mobileprovision Payload/ MYAPP.app/embedded.mobileprovision&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Step4: 重签名&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/codesign -f -s &lt;span class=&quot;string&quot;&gt;&quot;iPhone Distribution: YourCompanyName&quot;&lt;/span&gt; --resource-rules Payload/ MYAPP.app/ResourceRules.plist Payload/ MYAPP.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Step 5: 重新打包，生成新的ipa&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zip -r New_ MYAPP.ipa Payload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：&lt;br&gt;MYAPP.ipa: 要重签名的ipa&lt;/p&gt;
&lt;p&gt;MyEnterprise.mobileprovision:要用来签名的provision文件&lt;/p&gt;
&lt;p&gt;YourCompanyName:指该签名对应的证书的名字，这个可以在钥匙串中找到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;在step4时有可能会报错：object-file-format-unrecognized-invalid-or-unsuitable-解决方法：&quot;&gt;&lt;a href=&quot;#在step4时有可能会报错：object-file-format-unrecognized-invalid-or-unsuitable-解决方法：&quot; class=&quot;headerlink&quot; title=&quot;在step4时有可能会报错：object file format unrecognized, invalid, or unsuitable 解决方法：&quot;&gt;&lt;/a&gt;在step4时有可能会报错：object file format unrecognized, invalid, or unsuitable 解决方法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1）首先查看/usr/bin目录下是否存在codesign_allocate程序，如果存在，执行改名操作。 如果不存在，直接执行第二步&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mv /usr/bin/codesign_allocate /usr/bin/codesign_allocate_old&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;2）将xcode目录下的codesign_allocate做一个软链接&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo ln -s /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate /usr/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Step1 : 解压IPA&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;ta
    
    </summary>
    
      <category term="iOS" scheme="http://blog.alithink.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Cocos2D简单iPhone游戏【入门教程】</title>
    <link href="http://blog.alithink.com/2014/07/17/cocos2d%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.alithink.com/2014/07/17/cocos2d教程/</id>
    <published>2014-07-17T09:33:40.000Z</published>
    <updated>2016-06-04T13:33:47.000Z</updated>
    
    <content type="html">&lt;p&gt;我想没有什么比更新入门教程更适合用来庆祝具有标志性的Cocos2D 3.0的诞生了。&lt;/p&gt;
&lt;p&gt;Cocos2D 3.0是iOS平台一款2D游戏开发框架的最新版本。App Store上数以千计的游戏不乏一些排行前十的游戏都是用它来进行开发的。&lt;/p&gt;
&lt;p&gt;它对sprite有很好的支持,包含一个完美的Chipmunk2D physics类库，支持OpenAL声音类库，诸多有趣的效果，让你可以用它做更多事情。&lt;/p&gt;
&lt;p&gt;通过本Cocos2D 3.0的入门教程，你将会学习从头到尾的编写一个简单有趣的iPhone 2D游戏。如果你之前已经学习过了Cocos2D 2.0的教程，那么将会将会对本教程感觉比较熟悉，但是你仍然可以通过本教程学习利用物理引擎实现一些好玩的东西。&lt;/p&gt;
&lt;p&gt;你可以选择跟随本教程进行学习，当然你也可以直接在本文的末尾下载例子源程序进行学习。那么接下来我们跟随忍者一起热血一下吧。&lt;/p&gt;
&lt;h3 id=&quot;Cocos2D-vs-Sprite-Kit&quot;&gt;&lt;a href=&quot;#Cocos2D-vs-Sprite-Kit&quot; class=&quot;headerlink&quot; title=&quot;Cocos2D vs Sprite Kit&quot;&gt;&lt;/a&gt;Cocos2D vs Sprite Kit&lt;/h3&gt;&lt;p&gt;在你开始学习之前，你也许在想：“嘿，我已经有苹果的Sprite Kit了，还需要Cocos2D吗？我真的需要尝试一些其它的东东吗？”&lt;/p&gt;
&lt;p&gt;好吧，跟其它任何游戏框架一样，Cocos2D也有它的一些优点和缺点：&lt;/p&gt;
&lt;h4 id=&quot;Cocos2D-优点&quot;&gt;&lt;a href=&quot;#Cocos2D-优点&quot; class=&quot;headerlink&quot; title=&quot;Cocos2D 优点&quot;&gt;&lt;/a&gt;Cocos2D 优点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;优点一: 你不再被限制在iOS平台了，想要把你的游戏发布到Android平台上吗？那么用Cocos2D可以帮你写一遍代码就可以跨平台发布了！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优点二: 你可以写代码自定义一些OpenGL效果了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;优点三: 它是开源的，也就是说如果你想要改造写什么或者研究一下它内部是如何运转的，你只需要深入研究一下它的源码就可以了。.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Cocos2D-缺点&quot;&gt;&lt;a href=&quot;#Cocos2D-缺点&quot; class=&quot;headerlink&quot; title=&quot;Cocos2D 缺点&quot;&gt;&lt;/a&gt;Cocos2D 缺点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缺点一: 它不是内建在Xcode里面的，所以你要使用它就必须要下载安装它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺点二: 它目前还没有自带的纹理与粒子编辑器（但是已经有很多很棒的第三方编辑器了）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cocos2D拥有一个完整的社区，社区里有很多相关的教程、书籍和例子程序。Cocos2D的缔造者是一波旨在令游戏开发变得简单的游戏开发者，他们希望开发者利用它能够简单地创造很多伟大的游戏。&lt;/p&gt;
&lt;h3 id=&quot;安装-Cocos2D&quot;&gt;&lt;a href=&quot;#安装-Cocos2D&quot; class=&quot;headerlink&quot; title=&quot;安装 Cocos2D&quot;&gt;&lt;/a&gt;安装 Cocos2D&lt;/h3&gt;&lt;p&gt;The new Cocos2D 3.0 Installer&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cocos2D 3.0 使用了一个全新的安装程序，安装起来没有比这更简单的了！&lt;/p&gt;
&lt;p&gt;只需要 下载最新的Cocos2D 安装器 (3.0版本以上), 打开DMG文件然后双击安装器。随后安装器会自动帮你配置好Xcode的Cocos2D模板并且部署好Cocos2D的Xcode文档。&lt;/p&gt;
&lt;p&gt;当安装开始的时候，你将会看到一大堆信息，待安装完成之后会自动打开Cocos2D的欢迎页面。恭喜你，你已经做好了使用Cocos2D的准备工作了！&lt;/p&gt;
&lt;h3 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h3&gt;&lt;p&gt;让我们使用上一步安装的Cocos2D模板搭建一个简单的Hello World游戏作为开始吧。&lt;/p&gt;
&lt;p&gt;打开Xcode，选择File\New Project, 然后选择iOS\cocos2d v3.x\cocos2d iOS 模板，点击Next:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Product Name 输入Cocos2DSimpleGame, 设备选择iPhone 然后点击Next:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择一个位置保存你的工程，然后点击Create。然后直接点击play按钮编译运行一下项目。你会看到下面的东东:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 Simple Sprite 按钮切换到另一个测试场景,接下来我们将一起针对改场景进行改造:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cocos2D引入了场景scenes的概念，你可以把它想成是游戏的多个屏幕。HelloWorld游戏的第一个场景就是它的菜单场景IntroScene, 第二个场景就是转动着Cocos2D logo标志的HelloWorldScene. 让我们仔细研究下这个场景。&lt;/p&gt;
&lt;h3 id=&quot;忍者驾到&quot;&gt;&lt;a href=&quot;#忍者驾到&quot; class=&quot;headerlink&quot; title=&quot;忍者驾到!&quot;&gt;&lt;/a&gt;忍者驾到!&lt;/h3&gt;&lt;p&gt;在忍者做它漂亮的出场秀之前，你首先需要用到一些图片素材…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一步：First step, 下载本工程的资源包。解压后拖动ResourcePack到项目的工程目录中。一定要勾选上 “Copy items into destination group’s folder (if needed)”选项并且勾选上Cocos2DSimpleGame目标target。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二步：打开HelloWorldScene.m。记住，这段代码是用来构建那个旋转着Cocos2D logo的场景的，这个场景可以作为游戏制作很好的起点。修改之前先看一下模板代码：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation HelloWorldScene &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCSprite *_sprite;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (id)init &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [super init];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!self) return(nil); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.userInteractionEnabled = YES;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 4  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCNodeColor *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:&lt;span class=&quot;number&quot;&gt;0.2f&lt;/span&gt; green:&lt;span class=&quot;number&quot;&gt;0.2f&lt;/span&gt; blue:&lt;span class=&quot;number&quot;&gt;0.2f&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;]];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self addChild:background];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 5  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _sprite = [CCSprite spriteWithImageNamed:@&lt;span class=&quot;string&quot;&gt;&quot;Icon-72.png&quot;&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _sprite.position  = ccp(self.contentSize.width/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,self.contentSize.height/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self addChild:_sprite];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 6  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCActionRotateBy* actionSpin = [CCActionRotateBy actionWithDuration:&lt;span class=&quot;number&quot;&gt;1.5f&lt;/span&gt; angle:&lt;span class=&quot;number&quot;&gt;360&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [_sprite runAction:[CCActionRepeatForever actionWithAction:actionSpin]];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 7  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCButton *backButton = [CCButton buttonWithTitle:@&lt;span class=&quot;string&quot;&gt;&quot;[ Menu ]&quot;&lt;/span&gt; fontName:@&lt;span class=&quot;string&quot;&gt;&quot;Verdana-Bold&quot;&lt;/span&gt; fontSize:&lt;span class=&quot;number&quot;&gt;18.0f&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backButton.positionType = CCPositionTypeNormalized;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backButton.position = ccp(&lt;span class=&quot;number&quot;&gt;0.85f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.95f&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// Top Right of screen  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [backButton setTarget:self selector:@selector(onBackClicked:)];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self addChild:backButton];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们一起逐行过一下：&lt;/p&gt;
&lt;p&gt;为了接下来更方便地操作这个正在旋转的Cocos2D logo图标，我们为它声明一个私有实例。&lt;/p&gt;
&lt;p&gt;初始化 HelloWorld 场景.&lt;/p&gt;
&lt;p&gt;配置这个场景让它可以响应Cocos2D 的点击事件。在之后你会看到这这样配置使得 touchBegan:withEvent: 方法将要被调用到。&lt;/p&gt;
&lt;p&gt;创建一个 CCNodeColor, 用它来展示一种颜色（本教程中用它展示深灰色）。当这个node创建之后，你需要调用 addChild: 把它加到当前场景之后才能看到它。现在你的场景拥有一个背景色了!&lt;/p&gt;
&lt;p&gt;用 spriteWithImageNamed: 这个方法创建一个 CCSprite 并为它加载一个图片资源。通过使用这个屏幕的坐标，这个sprite的位置被放置在了屏幕的中央。再调用一下 addChild: 方法，把它也添加到场景中。&lt;/p&gt;
&lt;p&gt;创建一个 CCActionRotateBy action，我们将用它来给这个sprite做360度旋转，配置 CCActionRepeatForever 参数让这个旋转动作无限循环下去。然后调用 runAction 方法让sprite接收这个action。在接下来的讨论中会发现Actions 是Cocos2D的一项非常强大的特性。&lt;/p&gt;
&lt;p&gt;创建一个 CCButton 用以点击返回 IntroScene 场景, 你可以用这个操作作为重新初始化当前场景的一种简单方法。&lt;/p&gt;
&lt;p&gt;很棒! 首先呢，让我们把旋转着的Cocos2D logo图标替换成忍者的。&lt;/p&gt;
&lt;p&gt;想想该怎么做呢? 给你一些提示:&lt;/p&gt;
&lt;p&gt;看一看你刚刚添加到项目中的 ResourcePack ,从里面找一找忍者的图片。&lt;/p&gt;
&lt;p&gt;你只需要改动一行代码就可以了!&lt;/p&gt;
&lt;p&gt;尝试尽量自己搞定它，但是如果你实在卡在这里了，那么方法就在下面：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_sprite = [CCSprite spriteWithImageNamed:@&lt;span class=&quot;string&quot;&gt;&quot;player.png&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这很简单， _sprite 是一个很明显的名字但是当你开始使用_sprite1, _sprite2 的时候它会显得有一点混乱，所以我们把 _sprite 改成 _player。在 @implementation 中找到第一项：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation HelloWorldScene &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCSprite *_sprite;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后把它改成:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implementation HelloWorldScene &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCSprite *_player;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;很快你就会发现Xcode给你标志出5个错误并且帮你把这错误的几行用红色高亮了。不用担心，这是因为你把 _sprite 改名成了 _player，导致 _sprite 失效的原因。所以继续把所有的 _sprite 引用都改成 _player. 就OK了。&lt;/p&gt;
&lt;p&gt;编译运行项目，让我们看一下不需要打怪的忍者的生活状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在旋转着的Cocos2D logo图片已经被替换成忍者的了。但愿忍者不会感觉到晕。。。&lt;/p&gt;
&lt;p&gt;然而，忍者这辈子就是被训练来战斗的，所以接下来你想要搞一些怪物让忍者挑战一下!&lt;/p&gt;
&lt;h3 id=&quot;疯狂的怪物出现了&quot;&gt;&lt;a href=&quot;#疯狂的怪物出现了&quot; class=&quot;headerlink&quot; title=&quot;疯狂的怪物出现了&quot;&gt;&lt;/a&gt;疯狂的怪物出现了&lt;/h3&gt;&lt;p&gt;接下来你想要添加一些怪物到你的场景中。一个不会动的怪物自然不会对一个训练有素的忍者造成任何威胁,所以为了变得更有趣一些，你将添加一些会动的怪物。你将在屏幕的右外延创建一些怪物并且给它们添加 CCAction , 命令它们从屏幕右边向屏幕左边移动。&lt;/p&gt;
&lt;p&gt;在 HelloWorldScene.m 中添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addMonster:(CCTime)dt &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCSprite *monster = [CCSprite spriteWithImageNamed:@&lt;span class=&quot;string&quot;&gt;&quot;monster.png&quot;&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; minY = monster.contentSize.height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxY = self.contentSize.height - monster.contentSize.height / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rangeY = maxY - minY;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; randomY = (arc4random() % rangeY) + minY;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    monster.position = CGPointMake(self.contentSize.width + monster.contentSize.width/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, randomY);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self addChild:monster];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; minDuration = &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; maxDuration = &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rangeDuration = maxDuration - minDuration;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; randomDuration = (arc4random() % rangeDuration) + minDuration;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 4  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCAction *actionMove = [CCActionMoveTo actionWithDuration:randomDuration position:CGPointMake(-monster.contentSize.width/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, randomY)];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCAction *actionRemove = [CCActionRemove action];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [monster runAction:[CCActionSequence actionWithArray:@[actionMove,actionRemove]]];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们一起逐行过一下：&lt;/p&gt;
&lt;p&gt;为怪物的诞生位置定一个纵向范围。当你放置一个sprite的时候，默认的定位到的是sprite的中心坐标。所以这里为了不至于让怪物断掉，你在计算的时候需要用屏幕的高度减掉怪物的高度。&lt;/p&gt;
&lt;p&gt;用屏幕的宽度加上怪物的宽度确保把怪物恰好定位到屏幕的右外延，不让怪物露出来。&lt;/p&gt;
&lt;p&gt;现在你想要决定怪物横穿屏幕的用时，让我们定个随机时间吧，让怪物的移动更加难以预测。&lt;/p&gt;
&lt;p&gt;你将使用Cocos2D的 CCActionMoveTo: action 来快速移动怪物从起点（屏幕右外延）到目的地（屏幕左外延）。&lt;/p&gt;
&lt;p&gt;你已经看到旋转的action了，然而Cocos2D其实提供了很多非常方便的内置actions，包括移动的、旋转的、消失的、动画的等等。这里我们对怪物使用三种action:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CCActionMoveTo: 这个action被用作控制怪物的移动轨迹，在本教程中用于控制它从屏幕右侧移动到左侧。这个action的duration用于控制怪物执行动作所需的时间。Duration设置的越短，怪物移动的速度将越快。在这里你把duration设置成2秒到4秒之间的随机秒数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CCActionRemove: 将node从它的parent移除的好方法，可以有效地将node从场景中删除。当看不到怪物的时候（怪物移动到屏幕做外延的时候）你可以使用这个action把怪物从这个场景中移除。这步是非常重要的，如果不这么做你会发现有成千上万的怪物试图穿越你的iPhone，它们会耗光你设备的全部资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CCActionSequence: 这个序列action可以让你把一组action串在一起按序列执行，同一时间只有一个action在执行。通过这个方法你可以设置 CCActionMoveTo action 首先执行，一旦这个action执行完成了接着执行 CCActionRemove action。你可以用这个强大的action创建一组复杂的动画序列。&lt;br&gt;好的，现在你有了一个向场景添加怪物的方法了。然而对于一个经验丰富的忍者来说，一个怪物不足为惧，让我们写一个定时产生怪物的方法吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cocos2D 提供了一个定时器帮助你每X.X秒调用一下回调方法，所以你可以利用它来完成每X秒生成怪物的方法。&lt;/p&gt;
&lt;p&gt;打开 HelloWorldScene.m 然后在 onEnter 方法的 [super onEnter]; 之后添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self schedule:@selector(addMonster:) interval:&lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样会创建一个每1.5秒调用 addMonster: 方法的Cocos2D 定时器。&lt;/p&gt;
&lt;p&gt;记住当你创建 addMonster 方法的时候, 会有一个额外的 dt 参数。 这代表着时间增量，也表示当前帧与之前的时间差异。定时器要求每个方法声明的时候都加上这个参数，虽然在这个教程里面你将不会使用到它。&lt;/p&gt;
&lt;p&gt;在你看到这些怪物之前，你需要做点修改。让我们带领大家从阴暗中走出来一些。为啥不把背景色从深灰改成浅灰色呢？&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CCNodeColor *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:&lt;span class=&quot;number&quot;&gt;0.6f&lt;/span&gt; green:&lt;span class=&quot;number&quot;&gt;0.6f&lt;/span&gt; blue:&lt;span class=&quot;number&quot;&gt;0.6f&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;1.0f&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目前你忍者的头一定还在旋转着，你能让它停止转动，并且把他移动到偏左一些这样便于让它做好准备面对前面的突击？&lt;/p&gt;
&lt;p&gt;禁用头的旋转 CCActionRotateBy action。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 6  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//CCActionRotateBy* actionSpin = [CCActionRotateBy actionWithDuration:1.5f angle:360];  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[_player runAction:[CCActionRepeatForever actionWithAction:actionSpin]];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;改变忍者的位置。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_player.position  = ccp(self.contentSize.width/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,self.contentSize.height/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你也许会疑惑为什么要把宽度除以8（屏幕的1/8）。这是因为如果图方便直接写死坐标，那么遇到不同分辨率设备的时候就需要每种设备设置不同的坐标。&lt;/p&gt;
&lt;p&gt;如果你感兴趣想要多了解一些，看一下 CCButton 的位置配置方式，注意它使用了一种不同的 positionType ，它使用了标准化的解决方案0..1，0..1针对所有设备。&lt;/p&gt;
&lt;p&gt;编译运行，你应该可以看到很多怪物穿越屏幕！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;波动拳（Hadouken）&quot;&gt;&lt;a href=&quot;#波动拳（Hadouken）&quot; class=&quot;headerlink&quot; title=&quot;波动拳（Hadouken）&quot;&gt;&lt;/a&gt;波动拳（Hadouken）&lt;/h3&gt;&lt;p&gt;不幸的是你的忍者还没有足够强大到可以发射波动拳，所以你将需要依靠你专业的投掷技巧来抵御邪恶的（或者可能只是误解）怪物。&lt;/p&gt;
&lt;p&gt;给自己那个手里剑然后添加个投掷的action&lt;/p&gt;
&lt;p&gt;你将再次使用 CCActionMoveTo: action, 然而这次不会像是从 _player.position 移动到点击位置那般简单。 你想要将你的投射物沿着点击的方向穿越整个屏幕。因此你需要用到只是一点数学知识。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以从起点到点击点的x轴、y轴的位移变化中得到一个小的三角形。你只需求得一个拥有相同角度并且终止点在屏幕边沿的大三角形就OK了。&lt;/p&gt;
&lt;p&gt;为了完成这个运算，如果你有一些向量数学的基础就轻松多了（比如知道增加和减少向量的方法）。 Cocos2D 包含了一系列方便的向量操作函数，如 ccpAdd 和 ccpSub 。&lt;/p&gt;
&lt;p&gt;如果你对接下来的计算有任何疑问，请速查 vector math explanation。关于这个方面我个人建议看一下非常好的 Khan Academy 教学视频。&lt;/p&gt;
&lt;p&gt;响应点击了!&lt;/p&gt;
&lt;p&gt;正如你所看到的HelloWorldScene 模板已经在 init 方法中允许接收touch相应了。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;self.userInteractionEnabled = YES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;为了处理点击相应你通常需要创建 touchBegan: 方法，不过默认模板已经很体贴地给你带来了一个简单的 touchBegan 方法实例。&lt;/p&gt;
&lt;p&gt;打开 HelloWorldScene.m 并且用下面的代码替换现有的 touchBegan: 方法内容:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)touchBegan:(UITouch *)touch withEvent:(UIEvent *)event &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGPoint touchLocation = [touch locationInNode:self];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGPoint offset    = ccpSub(touchLocation, _player.position);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;   ratio     = offset.y/offset.x;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;     targetX   = _player.contentSize.width/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + self.contentSize.width;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;     targetY   = (targetX*ratio) + _player.position.y;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGPoint targetPosition = ccp(targetX,targetY);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCSprite *projectile = [CCSprite spriteWithImageNamed:@&lt;span class=&quot;string&quot;&gt;&quot;projectile.png&quot;&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    projectile.position = _player.position;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self addChild:projectile ];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 4  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCActionMoveTo *actionMove   = [CCActionMoveTo actionWithDuration:&lt;span class=&quot;number&quot;&gt;1.5f&lt;/span&gt; position:targetPosition];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CCActionRemove *actionRemove = [CCActionRemove action];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [projectile runAction:[CCActionSequence actionWithArray:@[actionMove,actionRemove]]];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们一起逐行过一下：&lt;/p&gt;
&lt;p&gt;你需要将屏幕点击转化为场景的坐标系表示。Cocos2D的UITouch分类里有一个很方便的方法 locationInNode: 可以做的这一点。&lt;/p&gt;
&lt;p&gt;所以正如你所见，你得到了一个由起点到点击点的x、y轴位移组成的小三角形。你只需求得一个拥有相同角度并且终止点在屏幕边沿的大三角形就OK了。&lt;/p&gt;
&lt;p&gt;创建投掷物的sprite并且设置它的起始位置与忍者一样。你可以简单的使用 _player ，这就是你之前设置这个私有实例变量的原因。&lt;/p&gt;
&lt;p&gt;你现在应该对CCActionMoveTo 这个方法更加熟悉了。你有了之前计算的目标点和投掷物投掷完成的时间duration（duration越小，投掷物就会越快投过去）。&lt;/p&gt;
&lt;p&gt;编译运行，尽情开火吧!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Arggghhh 这些怪物太强大了，我们为什么不把他们给干掉呢！&lt;/p&gt;
&lt;h3 id=&quot;碰撞检测和物理&quot;&gt;&lt;a href=&quot;#碰撞检测和物理&quot; class=&quot;headerlink&quot; title=&quot;碰撞检测和物理&quot;&gt;&lt;/a&gt;碰撞检测和物理&lt;/h3&gt;&lt;p&gt;那么现在你有了一个忍者、很多怪物和很多穿越屏幕的手里剑。看起来不错了，不过如果带一点摩擦的话就更好玩了，为了达成这一目的你需要在投掷物跟怪物之间做碰撞检测。&lt;/p&gt;
&lt;p&gt;Cocos2D 3.0的一个伟大的特性就是一套完整的物理引擎，有了它完成这个任务就小菜一碟了。物理引擎的伟大在于模拟了真实的移动，而且它对于处理碰撞检测也非常有用。 &lt;/p&gt;
&lt;p&gt;你现在将要使用Cocos2D的物理引擎去判定怪物和抛掷物的碰撞。完成它需要四个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;搭建物理世界. 物理世界是针对物理学计算的模拟空间。你将为当前场景搭建一个并且修改一些属性例如重力。物理世界搭建完成之后，你需要修改现有的游戏对象，把他们添加到物理世界中进而他们都将成为物理模拟的一部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为每个sprite创建物理主体. 使用Cocos2D你可以为每一个sprite关联物理主体用于碰撞检测并且可以设置某些属性。记住物理主体不用必须跟sprite的形状完全一样。通常它是一些简单的矩形或者圆形，甚至是一个像素清晰的轮廓。这样已经可以很好的满足大部分游戏并且可以提供更好的物理效果处理效率。&lt;br&gt;为每一种sprite设置CollisionType. Cocos2D物理引擎的一个方便特性是你不需要用数字定义你的碰撞类型了。你可以配置一个简单易懂的字符串定义你的碰撞类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置碰撞相应代理. 默认当连个物理主体碰在一起他们会被物理模拟器处理，然而你想要在投掷物碰到怪物的时候做一些事情例如干掉怪物。因此你需要添加一个碰撞响应代理去处理投掷物与怪物之间的碰撞类型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们开始吧。首先，你现在需要为你的物理世界添加另外一个私有实例变量。&lt;/p&gt;
&lt;p&gt;打开 HelloWorldScene.m 然后在 @implementation HelloWorldScene 声明里面 CCSprite 的初始化之后添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CCPhysicsNode *_physicsWorld;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你需要配置并添加这个物理模拟器到你的场景中，在 init 方法的 CCNodeColor 之后添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_physicsWorld = [CCPhysicsNode node];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_physicsWorld.gravity = ccp(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_physicsWorld.debugDraw = YES;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_physicsWorld.collisionDelegate = self;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[self addChild:_physicsWorld];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为你要使用物理模拟器主要为了做碰撞检测，在这里把重力（Gravity）设置成 (0,0) 。Cocos2D 有很多方便的调试函数，debugDraw 标志对于具体数字化物理世界是非常有用的。你可以看到所有被添加到模拟器上的物理主体。你同时需要设置 collisionDelegate 到 self, 这样使得你可以添加碰撞处理到场景中而且物理模拟器知道去 HelloWorldScene 中匹配碰撞的响应处理。&lt;/p&gt;
&lt;p&gt;你会注意到Xcode在 collisionDelegate 这行抛出了一个警告; 这很容易解决。打开 HelloWorldScene.h 然后标志这个 interface 实现CCPhysicsCollisionDelegate。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface HelloWorldScene : CCScene &amp;lt;CCPhysicsCollisionDelegate&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你需要为忍者配置物理主体并且将它添加到 _physicsWorld 而不是直接添加到场景中。&lt;/p&gt;
&lt;p&gt;退回到 HelloWorldScene.m, 在 init 方法中找到如下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self addChild:_player];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将它替换成如下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_player.physicsBody = [CCPhysicsBody bodyWithRect:(CGRect)&amp;#123;CGPointZero, 	_player.contentSize&amp;#125; cornerRadius:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 1  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_player.physicsBody.collisionGroup = @&lt;span class=&quot;string&quot;&gt;&quot;playerGroup&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 2  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_physicsWorld addChild:_player];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;快速看一下这个代码片段:&lt;/p&gt;
&lt;p&gt;创建一个物理主体，在这个例子中使用忍者的 contentSize 来创建一个环绕在忍者四周的矩形主体。&lt;br&gt;设置物理主体的 collisionGroup, 默认所有的主体都会碰撞。如果你将一些物理主体设置成相同的 collisionGroup 他们之间就不会再互相碰撞了, 这点当你想要创建一个由多个身体组成的角色，而且不想让他的每个身体互相碰撞的时候非常有用,例如一个拿着武器的角色。你将用这个保证投掷物不会撞到角色。&lt;/p&gt;
&lt;p&gt;你已经配置好物理模拟器、为角色创建了物理主体并且把它添加到了物理模拟器中。现在想想你能不能自己为怪物也添加到物理模拟器中。&lt;/p&gt;
&lt;p&gt;查找 addMonster: 方法并且定位到如下代码:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self addChild:monster];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将它替换成:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;monster.physicsBody = [CCPhysicsBody bodyWithRect:(CGRect)&amp;#123;CGPointZero, 	monster.contentSize&amp;#125; cornerRadius:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;monster.physicsBody.collisionGroup = @&lt;span class=&quot;string&quot;&gt;&quot;monsterGroup&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;monster.physicsBody.collisionType  = @&lt;span class=&quot;string&quot;&gt;&quot;monsterCollision&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_physicsWorld addChild:monster];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这几乎是跟为 _player 添加物理主体的方式的一致的，但是我为了介绍一个新属性使了点小聪明。这次你设置了 collisionType 属性, 这将被用来为’monsterCollision’和’projectileCollsion’的 collisionType 搭建一个物理模拟器碰撞代理方法。&lt;/p&gt;
&lt;p&gt;你快搞定它了！这次试着把抛掷物添加到模拟器中。&lt;/p&gt;
&lt;p&gt;我会给你一个提示：搞定它需要使用到 collisionType 和 collisionGroup 属性。&lt;/p&gt;
&lt;p&gt;找到 touchBegan:withEvent 方法然后定位到如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self addChild:projectile];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将它替换成:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;projectile.physicsBody = [CCPhysicsBody bodyWithRect:(CGRect)&amp;#123;CGPointZero, 	projectile.contentSize&amp;#125; cornerRadius:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;projectile.physicsBody.collisionGroup = @&lt;span class=&quot;string&quot;&gt;&quot;playerGroup&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;projectile.physicsBody.collisionType  = @&lt;span class=&quot;string&quot;&gt;&quot;projectileCollision&quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_physicsWorld addChild:projectile];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译运行，你应该会看到很多漂亮的粉红色的小方块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这些sprite周围的粉红色方块是被 _physics 的 debugDraw 属性创建的。在你首次搭建物理世界的时候他们是很有用的，你可以通过他们确认一切工作是否如你所愿的进行着。注意到在手里剑周围的方块不是很和谐；如果用圆形的话应该更合适一些。&lt;/p&gt;
&lt;p&gt;当然有这么个方法bodyWithCircleOfRadius:可以用于创建更时候你的抛掷物的圆形物理主体。将抛掷物物理主体的配置代码替换为如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;projectile.physicsBody = [CCPhysicsBody bodyWithCircleOfRadius:projectile.contentSize.width/&lt;span class=&quot;number&quot;&gt;2.0f&lt;/span&gt; 	andCenter:projectile.anchorPointInPoints];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认中心点会被设置在sprite的左下方，然而你想把圆形放置在你的sprite的中心处。&lt;/p&gt;
&lt;p&gt;好的，你现在已经把你的游戏对象改成物理模拟器的一部分了。现在你一定想要在 projectileCollision 和monsterCollison collisionType 交流的时候做一些事情。&lt;/p&gt;
&lt;p&gt;Cocos2D物理引擎有很多很好的方法去完成这个目的。只需要在 HelloWorldScene.m中添加如下方法：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (BOOL)ccPhysicsCollisionBegin:(CCPhysicsCollisionPair *)pair monsterCollision:(CCNode *)monster projectileCollision:(CCNode *)projectile &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [monster removeFromParent];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [projectile removeFromParent];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return YES;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码很强大。当物理模拟器被搭建完成之后，物理引擎会去查找CCPhysicsCollisionDelegate 方法，如果找到了就会触发它。参数名设置成你想要配置成的collisionType。&lt;/p&gt;
&lt;p&gt;用这个方法你把 ‘projectile’ 和 ‘monster’彻底从模拟器和场景中移除了。你当然可以添加一个计分器，添加一个特殊效果或者其它你想在抛掷物与怪物碰撞时发生的事情。&lt;/p&gt;
&lt;p&gt;编译运行，你最后应该可以毁灭这些怪物了。忍者，前进，开火！&lt;/p&gt;
&lt;h3 id=&quot;收尾&quot;&gt;&lt;a href=&quot;#收尾&quot; class=&quot;headerlink&quot; title=&quot;收尾&quot;&gt;&lt;/a&gt;收尾&lt;/h3&gt;&lt;p&gt;你现在已经离完成一个简单游戏非常近了。但是 (Pew-Pew!), 添加一些音乐对于现在来说再好不过了。&lt;/p&gt;
&lt;p&gt;Cocos2D 用OpenAL声音类库提供声音支持。不需要添加任何的额外头文件，都为你准备好了。&lt;/p&gt;
&lt;p&gt;历史课程: 对于那些使用Cocos2D之前版本的用户也许会疑惑SimpleAudioEngine怎么了, 这个声音类库已经被Open AL取代了。&lt;/p&gt;
&lt;p&gt;播放一个SFX非常简单, 是时候在忍者每次发镖的时候添加一个SFX了。这个声音可能不能100%完美表现出忍者投掷手里剑的声音。:-)&lt;/p&gt;
&lt;p&gt;在创建抛掷物的 touchBegan: 方法的最后添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[OALSimpleAudio sharedInstance] playEffect:@&lt;span class=&quot;string&quot;&gt;&quot;pew-pew-lei.caf&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;是时候添加一些热血的音乐了，在 init 方法的 userInteractionEnabled 之后添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[OALSimpleAudio sharedInstance] playBg:@&lt;span class=&quot;string&quot;&gt;&quot;background-music-aac.caf&quot;&lt;/span&gt; loop:YES];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一步，注释掉 init 方法中的调试语句：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_physicsWorld.debugDraw = YES;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译运行, pew-pew. 你现在有声音了，简单不？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;搞完了去哪&quot;&gt;&lt;a href=&quot;#搞完了去哪&quot; class=&quot;headerlink&quot; title=&quot;搞完了去哪?&quot;&gt;&lt;/a&gt;搞完了去哪?&lt;/h3&gt;&lt;p&gt;完工了!  Cocos2D 3.0 game 这里有你目前编写的完整的代码。&lt;/p&gt;
&lt;p&gt;你已经在学习 Cocos2D 3.0 的道路上走了一大段路了,向你介绍了一些Cocos2D的核心内容。伟大始于渺小，所以你为什么不通过找个项目再做一些更加深入的研究呢？&lt;/p&gt;
&lt;p&gt;看一下 IntroScene 的代码你将会学到如何创建一个label。为何不加一个记录干掉怪物数量的计数器呢？&lt;/p&gt;
&lt;p&gt;当忍者碰到怪物的时候会发生什么呢？&lt;/p&gt;
&lt;p&gt;想要尝试一些更高大上的动画的话，在Xcode里面打开 Help\Documentation and API References 然后搜索 CCAction ，你会看到所有的你可以添加到你的游戏角色对象上的动画列表。&lt;/p&gt;
&lt;p&gt;我从来没有见过不会转的手里剑，为啥不尝试给它加一点旋转（我确定在这个教程开始的时候我们看到过一个现成的例子）提示：你可以对一个node多次使用 runAction 。 这些action没必要放在一个序列中。&lt;/p&gt;
&lt;p&gt;如果你想要学到更多关于Cocos2D的知识，official Cocos2D forum 是一个询问问题和学习经验的好地方。我的用户名是 @cocojoe ，随时都可以过来跟我交流。&lt;/p&gt;
&lt;p&gt;如果你对这篇教程有任何疑问或者建议请一起讨论！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.raywenderlich.com/61391/how-to-make-a-simple-iphone-game-with-cocos2d-3-0-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文原文链接&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我想没有什么比更新入门教程更适合用来庆祝具有标志性的Cocos2D 3.0的诞生了。&lt;/p&gt;
&lt;p&gt;Cocos2D 3.0是iOS平台一款2D游戏开发框架的最新版本。App Store上数以千计的游戏不乏一些排行前十的游戏都是用它来进行开发的。&lt;/p&gt;
&lt;p&gt;它对sprit
    
    </summary>
    
      <category term="iOS" scheme="http://blog.alithink.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>NSNull 找不到指定方法解决方案</title>
    <link href="http://blog.alithink.com/2014/07/14/NSNull%E6%89%A9%E5%B1%95/"/>
    <id>http://blog.alithink.com/2014/07/14/NSNull扩展/</id>
    <published>2014-07-14T09:33:40.000Z</published>
    <updated>2016-06-05T13:32:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;近期遇到一个问题：&quot;&gt;&lt;a href=&quot;#近期遇到一个问题：&quot; class=&quot;headerlink&quot; title=&quot;近期遇到一个问题：&quot;&gt;&lt;/a&gt;近期遇到一个问题：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于后台人员对于接口数据没有做空值处理，导致客户端接收到的有些数据为空（NSNull），而针对此类数据恰好客户端的存储结构为int和float类型，类型转换时报出了[NSNull intValue]或者[NSNull floatValue] unrecognized selector sent to instance 的错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决此问题尝试了以下思路：&quot;&gt;&lt;a href=&quot;#解决此问题尝试了以下思路：&quot; class=&quot;headerlink&quot; title=&quot;解决此问题尝试了以下思路：&quot;&gt;&lt;/a&gt;解决此问题尝试了以下思路：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1 添加returnObject == [NSNull null] 判断，NSNull的元素配置一个目标类型的初始值。&lt;br&gt;问题解决了，但这样做的话对于应用需要修改的地方较多，想想比较烦。&lt;/p&gt;
&lt;p&gt;2 想到此问题的引起原因是NSNull缺失这两种方法，也就是说只要为NSNull扩展补充缺失的方法就不会有问题了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;扩展NSNull代码如下：&quot;&gt;&lt;a href=&quot;#扩展NSNull代码如下：&quot; class=&quot;headerlink&quot; title=&quot;扩展NSNull代码如下：&quot;&gt;&lt;/a&gt;扩展NSNull代码如下：&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;string&quot;&gt;&quot;NSNull+NullCast.h&quot;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;)floatValue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)intValue &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在可能出现类似问题的类中引入NSNull+NullCast这个类问题就解决了，无需修改逻辑代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;近期遇到一个问题：&quot;&gt;&lt;a href=&quot;#近期遇到一个问题：&quot; class=&quot;headerlink&quot; title=&quot;近期遇到一个问题：&quot;&gt;&lt;/a&gt;近期遇到一个问题：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;由于后台人员对于接口数据没有做空值处理，导致客户端接收到的
    
    </summary>
    
      <category term="iOS" scheme="http://blog.alithink.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>“简密”App Store处女作</title>
    <link href="http://blog.alithink.com/2014/05/22/%E7%AE%80%E5%AF%86/"/>
    <id>http://blog.alithink.com/2014/05/22/简密/</id>
    <published>2014-05-22T09:33:40.000Z</published>
    <updated>2016-06-28T08:52:53.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;今天是我的iOS App Store上架应用处女作“简密”第一天上线的日子，简密是我从事iOS开发三年以来的第一款个人上架应用，之前做过两年的企业级应用开发以及公司的电商应用开发，有不少应用上架的经验，但要是论完全从头到尾，设计、制图、开发、测试、文案、广告以及部署上架完全由自己一人完成，“简密”确实是我的处女作。不论上架之后销售效果如何，这次开发的过程帮我重新梳理了一遍iOS App Store应用开发上架的整个流程，这点是我觉得做这件事意义最大的地方，当然如果有那么点微薄收入的话，我会更加欣慰的^_^。&lt;/p&gt;
&lt;h3 id=&quot;回顾一下App创作的过程，有这么几块感觉需要梳理总结：&quot;&gt;&lt;a href=&quot;#回顾一下App创作的过程，有这么几块感觉需要梳理总结：&quot; class=&quot;headerlink&quot; title=&quot;回顾一下App创作的过程，有这么几块感觉需要梳理总结：&quot;&gt;&lt;/a&gt;回顾一下App创作的过程，有这么几块感觉需要梳理总结：&lt;/h3&gt;&lt;h3 id=&quot;App原始矛盾的发掘&quot;&gt;&lt;a href=&quot;#App原始矛盾的发掘&quot; class=&quot;headerlink&quot; title=&quot;App原始矛盾的发掘&quot;&gt;&lt;/a&gt;App原始矛盾的发掘&lt;/h3&gt;&lt;p&gt;说白了就是应用要解决什么问题，能用来做些什么。这点很重要，“简密”这点做的不是特别好，因为当时做这款应用其实多半是想把平时工作学习中用到见到过的个人感觉比较好的体验效果做一个集合展示，由于最近做过二维码与加密解密模块的研究开发，所以就草率的选定了带加密功能的二维码这个核心需求。但现在回想过来这样做其实是有点本末倒置了，还是应该从用户的角度出发，从问题出发，然后再组织解决用户问题的功能实现、模块组合。&lt;/p&gt;
&lt;h4 id=&quot;拿“简密”来说的话，需求经过后期整理文案如下：&quot;&gt;&lt;a href=&quot;#拿“简密”来说的话，需求经过后期整理文案如下：&quot; class=&quot;headerlink&quot; title=&quot;拿“简密”来说的话，需求经过后期整理文案如下：&quot;&gt;&lt;/a&gt;拿“简密”来说的话，需求经过后期整理文案如下：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;简密：秘密的创造原来可以如此简单&lt;/p&gt;
&lt;p&gt;简密是一款文本转换生成加密二维码的实用工具。用户可以把自己的秘密生成加密的二维码在你的圈子中分享，你可以将二维码的密码告诉特定的朋友，只有知道密码的他们才能扫码揭开你的秘密，了解事情的真相。当然你也可以把简密当做一个普通的二维码扫码工具来使用。用户可以针对自己的需求创造很多有意思的玩法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;App的界面原型设计&quot;&gt;&lt;a href=&quot;#App的界面原型设计&quot; class=&quot;headerlink&quot; title=&quot;App的界面原型设计&quot;&gt;&lt;/a&gt;App的界面原型设计&lt;/h3&gt;&lt;p&gt;因为是自己独立开发找了一块白板把整个应用的界面直接画在了上面。感觉效果还是不错的，高效简洁，画的过程整个App的基本页面以及模块划分就逐渐清晰了，这时候不用太注重细节和页面效果创意，只需要理清楚有多少个页面和功能，它们之间的关联和跳转又是怎样的，通过这样的梳理，也就为开发奠定了一个基础的页面框架了。同时这时候可以确定一下App的整体风格，拿“简密”来说就是简约扁平风格，基础色调就是黑白。同时这部分感觉应该把广告的布局考虑进去，把广告对App造成的负影响尽量降到最低。&lt;/p&gt;
&lt;h3 id=&quot;App的程序框架搭建&quot;&gt;&lt;a href=&quot;#App的程序框架搭建&quot; class=&quot;headerlink&quot; title=&quot;App的程序框架搭建&quot;&gt;&lt;/a&gt;App的程序框架搭建&lt;/h3&gt;&lt;p&gt;这块没啥说的，有了需求和具体的界面布局，哪些需要自己开发，哪些可以借助第三方类库来辅助实现就比较清楚了，组织一下项目的文件结构，把需要的类库都引入完毕，然后就可以进行开发了。&lt;/p&gt;
&lt;h3 id=&quot;App的原始需求的实现以及优化&quot;&gt;&lt;a href=&quot;#App的原始需求的实现以及优化&quot; class=&quot;headerlink&quot; title=&quot;App的原始需求的实现以及优化&quot;&gt;&lt;/a&gt;App的原始需求的实现以及优化&lt;/h3&gt;&lt;p&gt;拿“简密”来说基础需求不复杂，很快就可以完成了，然后就是对它进行一些力所能及的雕琢。&lt;br&gt;比如这部分我把“帮我解密”模块的布局模仿了一把扁平化了的锁，点击加密的时候，有锁合上的动画效果，自我感觉效果还是不错的^_^。总之发挥想象给自己的App润色。&lt;/p&gt;
&lt;p&gt;同时添加一些风格统一的图标，这里推荐下面这个网站，有很多不错的免费图片素材：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;easyicon:&lt;a href=&quot;http://www.easyicon.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.easyicon.net/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;App全球市场的一些总结&quot;&gt;&lt;a href=&quot;#App全球市场的一些总结&quot; class=&quot;headerlink&quot; title=&quot;App全球市场的一些总结&quot;&gt;&lt;/a&gt;App全球市场的一些总结&lt;/h3&gt;&lt;p&gt;首先就是App文字的本地化，这点不用说用苹果官方的本地化方案就好了&lt;br&gt;NSLocalizedString。&lt;br&gt;也可以获取设备语言写一些针对不同语言的分支处理，具体判断方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSArray *languages = [defaults objectForKey:@&lt;span class=&quot;string&quot;&gt;&quot;AppleLanguages&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *currentLang = [languages objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return currentLang;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时还有一个细节就是App的CFBundleDisplayName别忘了配置一下，这能让你的应用在不同地区的设备上显示特定的语言名称。&lt;/p&gt;
&lt;h3 id=&quot;开发证书购买&quot;&gt;&lt;a href=&quot;#开发证书购买&quot; class=&quot;headerlink&quot; title=&quot;开发证书购买&quot;&gt;&lt;/a&gt;开发证书购买&lt;/h3&gt;&lt;p&gt;应用基本完工前就可以开始购买证书了，流程没啥难点，就是最近苹果强制定了个人民币美元的汇率（多交40多吧），这点真是亮瞎了我的眼，苹果你这是在欺负中国人吗。。。&lt;/p&gt;
&lt;p&gt;个人的证书很快，没有发送验证码激活的过程，就有一点需要注意下，就是如果你的apple id是用中文注册的，姓名也是中文名，由于注册开发者的时候需要用英文，因此在购买证书的时候，需要有一步要你打电话给苹果的客服确认下两个名字都是你，唉。。。ok,搞定之后就可以配置证书、app id以及描述文件了。。&lt;/p&gt;
&lt;h3 id=&quot;广告与其它第三方服务&quot;&gt;&lt;a href=&quot;#广告与其它第三方服务&quot; class=&quot;headerlink&quot; title=&quot;广告与其它第三方服务&quot;&gt;&lt;/a&gt;广告与其它第三方服务&lt;/h3&gt;&lt;p&gt;广告：其实这块现在也不知道怎样才是最好的选择，有经验的朋友还请多多指点，目前借鉴网上的说法，优先展现iAd,iAd加载不到才加载AdMob的广告，不过最近AdMob刚更新，真没底，大家也都比较担心更新之后的收益问题。&lt;/p&gt;
&lt;p&gt;分享：分享起初集成了友盟的分享，后来发现iOS6之后自带的分享基本就能满足我的App需求了，决定后期改成自带的分享控件。同时做一下本地化的分享列表展现处理，国内就不展现facebook和twitter了，万恶的The Great Fire Wall。&lt;/p&gt;
&lt;p&gt;推送：直接引入了腾讯的信鸽，就省去了服务器记录deviceToken的开销，免费获得一个推送功能^_^。&lt;/p&gt;
&lt;h3 id=&quot;itunesconnect配置与元数据&quot;&gt;&lt;a href=&quot;#itunesconnect配置与元数据&quot; class=&quot;headerlink&quot; title=&quot;itunesconnect配置与元数据&quot;&gt;&lt;/a&gt;itunesconnect配置与元数据&lt;/h3&gt;&lt;p&gt;正规流程不多说没什么难点，该签的协议就签一下。就是上全球市场这个翻译文案真是令人头大。。。翻了3个小时就翻译了这么几行字：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Mystery”:The creation of mysteries is so simple.&lt;/p&gt;
&lt;p&gt;“Mystery” is an app that can cast text to encrypted QR Code. We can share the mysterious QR Code generated by it to our timeline.We can send the password to the target friends.The truth can only be uncovered by the people who got the password.Certainly,we can also use it just like normal QR Code scanner.We can create a lot of interesting play for their own needs ^_^&lt;/p&gt;
&lt;p&gt;Tip 1:Here we can secretly write down their predictions and share them.Time to uncover the truth,show our insights.&lt;/p&gt;
&lt;p&gt;Tip 2:The life bothered with conflicts.Finger guessing is the original method of solving conflicts.However,there’s a fair problems(Hand Speed).Let’s encrypt the game result,and swap the QR Code each other.Finally,swap the password each other and decrypt the result.The winner is clear.&lt;/p&gt;
&lt;p&gt;Tip 3:I want to private contact in some public virtual environments(such as Twitter). Just encrypt the message and exchange the password, it’s a piece of cake ^_^&lt;/p&gt;
&lt;p&gt;Tip N:……&lt;/p&gt;
&lt;p&gt;There are more interesting play waiting for you to explore.Let’s enrich it together.&lt;/p&gt;
&lt;p&gt;One should always be a little improbable.—Oscar wilde.&lt;/p&gt;
&lt;p&gt;Welcome to contact me ^_^&lt;/p&gt;
&lt;p&gt;Email:cloudsthinker@qq.com&lt;/p&gt;
&lt;p&gt;Sina Weibo:@AliThink&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后就是做展示图，双语双尺寸一共20张图，又不想直接用截图，对于一个程序员来说要了命了。。。&lt;/p&gt;
&lt;p&gt;还有一点注意的就是优化关键词，感觉这块是个学问，优化的好的话对应用的影响挺大，“简密”的关键词的话，搜“神秘感”第一个就是，“保持”第三个，“简密”竟然排到了第六位，还没研究透这块，后期再优化优化。&lt;/p&gt;
&lt;h3 id=&quot;上传审核上架&quot;&gt;&lt;a href=&quot;#上传审核上架&quot; class=&quot;headerlink&quot; title=&quot;上传审核上架&quot;&gt;&lt;/a&gt;上传审核上架&lt;/h3&gt;&lt;p&gt;这块的话，就是当你用Xcode传不上去的时候建议再用Application Loader试一下。&lt;/p&gt;
&lt;p&gt;同时建议估算一下available date 估计成一个审核通过之后的日期。&lt;/p&gt;
&lt;p&gt;最后，说一下近期的审核速度，给大家做个参考，最近审核速度感觉快多了，新应用上传waiting for review 4天，in review 1天多没一会就ready for sale了。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;“简密”虽然不知道最后上架的效果如何，但是感觉对自己知识的梳理效果还是挺好的，以后就正式进入个人开发者行列了，多总结与大家共同进步^_^&lt;/p&gt;
&lt;p&gt;最后做个宣传把应用的下载链接发一下，有兴趣的朋友可以下载体验给评个分，有什么好的创意建议欢迎给我留言。&lt;/p&gt;
&lt;p&gt;简密 - 保持一点神秘感&lt;/p&gt;
&lt;p&gt;一个人应该永远保持一点神秘感 — 王尔德&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/cn/app/jian-mi-bao-chi-yi-dian-shen/id879758988?mt=8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunes.apple.com/cn/app/jian-mi-bao-chi-yi-dian-shen/id879758988?mt=8&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      记录简密创作的过程
    
    </summary>
    
      <category term="个人作品" scheme="http://blog.alithink.com/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    
  </entry>
  
</feed>
